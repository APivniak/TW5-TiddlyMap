{"version":3,"sources":["felixhayashi/tiddlymap/js/services/DialogManager.js"],"names":["DialogManager","callbackManager","context","templateId","param","callback","utils","isTrue","$tm","config","sys","suppressedDialogs","logger","bind","dialogTRef","path","tempRoot","genUUID","skeleton","getTiddler","dialogs","dialog","title","buttons","fields","classes","output","result","temp","template","currentTiddler","text","getText","touch","preselects","$tw","wiki","addTiddler","Tiddler","flatten","merge","footer","footers","fn","getElement","click","triggerTObj","tRef","isConfirmed","outputTObj","notify","deleteByPrefix","add","dialogTiddler","rootWidget","dispatchEvent","type","paramObject","addKeyBindings","name","getFirstElementByClassName","keys","keycharm","container","re","triggers","document","getElementsByClassName","i","classNames","className","split","j","matches","match","buttonName","key","buttonElement","length"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/DialogManager.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/DialogManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport CallbackManager from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\n\n/**\n * The DialogManager is responsible for preparing, displaying and\n * finalizing all the dialogs.\n */\nclass DialogManager {\n\n  /**\n   * @param {CallbackManager} callbackManager - A callback manager that\n   *     is informed about changed tiddlers and keeps track of the\n   *     various tiddlers produced during the dialog process.\n   * @param {Object} [context] - An optional *this*-reference to bind the\n   *     callback of each called dialog to. Otherwise, the callback of\n   *     each dialog has to be bound manually to the callback if required.\n   */\n  constructor(callbackManager, context) {\n\n    // create callback registry\n    this.callbackManager = callbackManager;\n    this.context = context;\n\n  }\n\n  /**\n   * This function opens a dialog based on a skeleton and some fields and eventually\n   * calls a callback once the dialog is closed. The callback contains an indicator\n   * whether the dialog subject was confirmed or the operation cancelled. In any\n   * case the output tiddler is passed to the callback. Each dialog may write its\n   * changes to this tiddler in order to store the dialog result and make it available\n   * to the callback.\n   *\n   * How does it work?\n   *\n   * The output of the dialog process is stored in a temporary tiddler that is only known\n   * to the current instance of the dialog. This way it is ensured that only the dialog process\n   * that created the temporary tiddler will retrieve the result. Now we are able to\n   * provide unambigous and unique correspondance to dialog callbacks.\n\n   * Any dialog output is stored in a unique output-tiddler. Once there is a result,\n   * a new result tiddler is created with indicators how to interpret the output.\n   * The result tiddler can be understood as exit code that is independent of the output.\n   * It is the result tiddler that triggers the dialog callback that was registered before.\n   * the output is then read immediately from the output-tiddler.\n   *\n   * @param {string} templateId - The dialog id which is the basename of\n   *     the template title.\n   * @param {Hashmap} [param] - All properties (except those with special meanings)\n   *     of param will be accessible as variables in the modal\n   * @param {string} [param.subtitle] -\n   * @param {string} [param.cancelButtonLabel] - The label of the cancel button.\n   * @param {string} [param.confirmButtonLabel] - The label of the confirm button.\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed, outputTObj). `outputTObj` contains data\n   *     produced by the dialog (can be undefined even if confirmed!).\n   *     Be careful: the tiddler that outputTObj represents is deleted immediately.\n   * @return {$tw.Tiddler} The dialog tddler object with all its fields.\n   */\n  open(templateId, param = {}, callback) {\n\n    if (utils.isTrue($tm.config.sys.suppressedDialogs[templateId], false)) {\n      $tm.logger('warning', 'Suppressed dialog', templateId);\n      return;\n    }\n\n    $tm.logger('debug', 'Dialog param object', param);\n\n    if (typeof callback === 'function' && this.context) {\n      callback = callback.bind(this.context);\n    }\n\n    // create a temporary tiddler reference for the dialog\n    const dialogTRef = `${$tm.path.tempRoot}/dialog-${utils.genUUID()}`;\n\n    // get the dialog template\n    const skeleton = utils.getTiddler(`${$tm.path.dialogs}/${templateId}`);\n\n    // fields used to handle the dialog process\n    let dialog = {\n      title: dialogTRef,\n      buttons: skeleton.fields['buttons'] || 'ok_cancel',\n      classes: 'tmap-modal-content ' + skeleton.fields['classes'],\n      output: dialogTRef + '/output',\n      result: dialogTRef + '/result',\n      temp: dialogTRef + '/temp',\n      template: skeleton.fields.title,\n      templateId: templateId,\n      currentTiddler: dialogTRef + '/output',\n      text: utils.getText($tm.path.dialogs)\n    };\n\n    utils.touch(dialog.output);\n\n    if (param.dialog) {\n\n      if (param.dialog.preselects) {\n\n        // register preselects\n        $tw.wiki.addTiddler(new $tw.Tiddler(\n          {title: dialog.output},\n          utils.flatten(param.dialog.preselects)\n        ));\n\n        // remove preselects from param object\n        delete param.dialog.preselects;\n\n      }\n\n      // extend the dialog object with parameters provided by the user\n      utils.merge(dialog, param.dialog);\n\n    }\n\n    // force the footer to be set to the wrapper\n    // the footer wrapper will determine the footer from the\n    // buttons field/variable\n    dialog.footer = utils.getText($tm.path.footers);\n\n    // flatten dialog and param object\n    dialog = utils.flatten(dialog);\n    param = utils.flatten(param);\n\n    const fn = tRef => {\n\n      DialogManager.getElement('hidden-close-button').click();\n\n      const triggerTObj = $tw.wiki.getTiddler(tRef);\n      const isConfirmed = triggerTObj.fields.text;\n\n      let outputTObj = null;\n      if (isConfirmed) {\n        outputTObj = $tw.wiki.getTiddler(dialog.output);\n      } else {\n        $tm.notify('operation cancelled');\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed, outputTObj);\n      }\n\n      // close and remove all tiddlers used by the dialog\n      utils.deleteByPrefix(dialogTRef);\n\n    };\n\n    // add trigger\n    this.callbackManager.add(dialog.result, fn, true);\n\n\n    // create dialog\n    const dialogTiddler = new $tw.Tiddler(skeleton, param, dialog);\n    $tw.wiki.addTiddler(dialogTiddler);\n\n    $tm.logger('debug', 'Opening dialog', dialogTiddler);\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tm-modal',\n      param: dialogTiddler.fields.title,\n      paramObject: dialogTiddler.fields\n    });\n\n    DialogManager.addKeyBindings();\n\n    return dialogTiddler;\n\n  };\n\n  static getElement(name) {\n\n    return utils.getFirstElementByClassName('tmap-' + name);\n\n  }\n\n  /**\n   * This method will search for form elements that have the class\n   * `tmap-trigger-field` set, which means that TiddlyMap shall\n   * perform a button press when a key combo occurs while the field\n   * has focus. To know which button to press on what key event,\n   * it looks for classes of the form: tmap-triggers-BUTTONNAME-on-KEYCOMBO.\n   */\n  static addKeyBindings() {\n\n    const keys = $tm.keycharm({\n      container: utils.getFirstElementByClassName('tc-modal')\n    });\n\n    const re = /tmap-triggers-(.+?)-on-(.+?)(?:\\s|$)/;\n    const triggers = document.getElementsByClassName('tmap-trigger-field');\n\n    for (let i = triggers.length; i--;) {\n      const classNames = triggers[i].className.split(' ');\n      for (let j = classNames.length; j--;) {\n        const matches = classNames[j].match(re);\n        if (!matches) { // don't care\n          continue;\n        }\n        const buttonName = matches[1];\n        const key = matches[2];\n        const buttonElement = DialogManager.getElement(buttonName);\n        if (!buttonElement) {\n          continue;\n        }\n        keys.bind(key, () => {\n          if (document.getElementsByClassName(classNames[j]).length) {\n            // only click button if trigger is active (i.e. still in focus)\n            // see https://github.com/felixhayashi/TW5-TiddlyMap/issues/280\n            buttonElement.click();\n          }\n        });\n      }\n    }\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default DialogManager;\n"],"sourceRoot":"../../../../../../src/plugins"}