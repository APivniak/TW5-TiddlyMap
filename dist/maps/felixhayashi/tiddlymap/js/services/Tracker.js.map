{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Tracker.js"],"names":["Tracker","fixer","wiki","$tw","logger","$tm","_createIndex","tById","idByT","each","tObj","tRef","utils","isSystemOrDraft","id","fields","genUUID","setField","tiddler","isForce","getTiddler","ResourceNotFoundException","title","getTiddlerRef"],"mappings":";;;;;;qjBAAA;AACA;;;;;;;;;;AAUA;;AAEA;;;;;;;;AAEA;;AAEA;;;IAGMA,O;AAEJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAEjB,SAAKC,IAAL,GAAYC,IAAID,IAAhB;AACA,SAAKE,MAAL,GAAcC,IAAID,MAAlB;;AAEA,SAAKE,YAAL;AAED;;AAED;;;;;;;;;;;;;;;;mCAYe;;AAEb,UAAMC,QAAQ,KAAKA,KAAL,GAAa,EAA3B,CAFa,CAEkB;AAC/B,UAAMC,QAAQ,KAAKA,KAAL,GAAa,EAA3B,CAHa,CAGkB;;AAE/B,WAAKN,IAAL,CAAUO,IAAV,CAAe,UAACC,IAAD,EAAOC,IAAP,EAAgB;;AAE7B,YAAIC,gBAAMC,eAAN,CAAsBH,IAAtB,CAAJ,EAAiC;AAC/B;AACD;;AAED;AACA,YAAII,KAAKJ,KAAKK,MAAL,CAAY,SAAZ,CAAT;AACA,YAAI,CAACD,EAAL,EAAS;AACPA,eAAKF,gBAAMI,OAAN,EAAL;AACAJ,0BAAMK,QAAN,CAAeP,IAAf,EAAqB,SAArB,EAAgCI,EAAhC;AACD;;AAEDP,cAAMO,EAAN,IAAYH,IAAZ,CAb6B,CAaX;AAClBH,cAAMG,IAAN,IAAcG,EAAd,CAd6B,CAcX;AAEnB,OAhBD;AAkBD;;AAED;;;;;;;;;;;;;;6BAWSI,O,EAASC,O,EAAS;;AAEzB;AACA;AACA,UAAMT,OAAOE,gBAAMQ,UAAN,CAAiBF,OAAjB,CAAb;;AAEA,UAAI,CAACR,IAAL,EAAW;AACT,cAAM,IAAIW,yBAAJ,CAA8BH,OAA9B,CAAN;AACD;;AAED,UAAIJ,KAAKJ,KAAKK,MAAL,CAAY,SAAZ,CAAT;;AAEA,UAAI,CAACD,EAAD,IAAOK,OAAX,EAAoB;AAClBL,aAAKF,gBAAMI,OAAN,EAAL;AACAJ,wBAAMK,QAAN,CAAeP,IAAf,EAAqB,SAArB,EAAgCI,EAAhC;AACA,aAAKV,MAAL,CAAY,MAAZ,EAAoB,qBAApB,EAA2CM,KAAKK,MAAL,CAAYO,KAAvD;AACD;;AAED;AACA;AACA,WAAKf,KAAL,CAAWO,EAAX,IAAiBJ,KAAKK,MAAL,CAAYO,KAA7B;AACA,WAAKd,KAAL,CAAWE,KAAKK,MAAL,CAAYO,KAAvB,IAAgCR,EAAhC;;AAEA,aAAOA,EAAP;AAED;;AAED;;;;;;;mCAIeI,O,EAAS;;AAEtB,aAAO,KAAKV,KAAL,CAAWI,gBAAMW,aAAN,CAAoBL,OAApB,CAAX,CAAP;AAED;;;uCAEkB;AACjB,aAAO,KAAKV,KAAZ;AACD;;;uCAEkB;AACjB,aAAO,KAAKD,KAAZ;AACD;;AAED;;;;;;;mCAIeO,E,EAAI;;AAEjB,aAAO,KAAKP,KAAL,CAAWO,EAAX,CAAP;AAED;;;;;;AAIH;;kBAEed,O","file":"../../../../../felixhayashi/tiddlymap/js/services/Tracker.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/services/tracker\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/***************************** CODE ********************************/\n\n/**\n *\n */\nclass Tracker {\n\n  constructor(fixer) {\n\n    this.wiki = $tw.wiki;\n    this.logger = $tm.logger;\n\n    this._createIndex();\n\n  }\n\n  /**\n   * TiddlyMap uses ids to reference tiddlers. This function creates\n   * a table that maps ids to tRefs and vice versa.\n   *\n   * Two indeces are added to the indeces chain:\n   * 1. tById – tiddler references by id\n   * 2. idByT – ids by tiddler references\n   *\n   * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n   *     use as basis for this index. If not stated, all tiddlers in\n   *     the wiki are used.\n   */\n  _createIndex() {\n\n    const tById = this.tById = {}; // tiddlerById\n    const idByT = this.idByT = {}; // idByTiddler\n\n    this.wiki.each((tObj, tRef) => {\n\n      if (utils.isSystemOrDraft(tObj)) {\n        return;\n      }\n\n      // will create id if not present\n      let id = tObj.fields['tmap.id'];\n      if (!id) {\n        id = utils.genUUID();\n        utils.setField(tObj, 'tmap.id', id);\n      }\n\n      tById[id] = tRef; // tiddlerById\n      idByT[tRef] = id; // idByTiddler\n\n    });\n\n  }\n\n  /**\n   * This method will assign an id to an *existing* tiddler that does\n   * not already possess and id. Any assigned id will be registered\n   * at the id->tiddler index.\n   *\n   * @param {Tiddler} tiddler - The tiddler to assign the id to.\n   * @param {boolean} isForce - True if the id should be overridden,\n   *     false otherwise. Only works if the id field is not set to title.\n   *\n   * @return {Id} The assigned or retrieved id.\n   */\n  assignId(tiddler, isForce) {\n\n    // Note: always reload from store to avoid setting wrong ids on tiddler\n    // being in the role of from and to at the same time.\n    const tObj = utils.getTiddler(tiddler);\n\n    if (!tObj) {\n      throw new ResourceNotFoundException(tiddler);\n    }\n\n    let id = tObj.fields['tmap.id'];\n\n    if (!id || isForce) {\n      id = utils.genUUID();\n      utils.setField(tObj, 'tmap.id', id);\n      this.logger('info', 'Assigning new id to', tObj.fields.title);\n    }\n\n    // blindly update the index IN ANY CASE because tiddler may have\n    // an id but it is not indexed yet (e.g. because of renaming operation)\n    this.tById[id] = tObj.fields.title;\n    this.idByT[tObj.fields.title] = id;\n\n    return id;\n\n  }\n\n  /**\n   * @param {Tiddler} tiddler\n   * @return string\n   */\n  getIdByTiddler(tiddler) {\n\n    return this.idByT[utils.getTiddlerRef(tiddler)];\n\n  }\n\n  getIdsByTiddlers() {\n    return this.idByT;\n  }\n\n  getTiddlersByIds() {\n    return this.tById;\n  }\n\n  /**\n   * @param id\n   * @return {TiddlerReference} tiddler\n   */\n  getTiddlerById(id) {\n\n    return this.tById[id];\n\n  }\n\n}\n\n/*** Exports *******************************************************/\n\nexport default Tracker;\n"],"sourceRoot":"../../../../../../src/plugins"}