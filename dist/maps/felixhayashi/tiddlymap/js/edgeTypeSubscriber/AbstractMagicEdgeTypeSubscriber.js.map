{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractMagicEdgeTypeSubscriber.js"],"names":["AbstractMagicEdgeTypeSubscriber","allEdgeTypes","options","edgeTypesByFieldName","utils","makeHashMap","id","edgeType","canHandle","name","tObj","fieldName","toWL","MissingOverrideError","typeWL","refsGroupedByType","fieldNames","fields","type","toRefs","getReferencesFromField","length","AbstractRefEdgeTypeSubscriber"],"mappings":";;;;;;;;AAYA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;+eAfA;AACA;;;;;;;;;AASA;;AAOA;;;IAGMA,+B;;;AAEJ;;;AAGA,2CAAYC,YAAZ,EAA0BC,OAA1B,EAAmC;AAAA;;AAIjC;AAJiC,kKAE3BD,YAF2B,EAEbC,OAFa;;AAKjC,UAAKC,oBAAL,GAA4BC,gBAAMC,WAAN,EAA5B;;AAEA,SAAK,IAAIC,EAAT,IAAeL,YAAf,EAA6B;;AAE3B,UAAMM,WAAWN,aAAaK,EAAb,CAAjB;AACA,UAAI,MAAKE,SAAL,CAAeD,QAAf,CAAJ,EAA8B;AAC5B,cAAKJ,oBAAL,CAA0BI,SAASE,IAAnC,IAA2CF,QAA3C;AACD;AACF;;AAbgC;AAelC;;AAED;;;;;;;;;;;;;;2CAUuBG,I,EAAMC,S,EAAWC,I,EAAM;;AAE5C,YAAM,IAAIC,+BAAJ,CAAyB,IAAzB,EAA+B,wBAA/B,CAAN;AAED;;;;;AAED;;;kCAGcH,I,EAAME,I,EAAME,M,EAAQ;;AAEhC,UAAMC,oBAAoBX,gBAAMC,WAAN,EAA1B;AACA,UAAMW,aAAaN,KAAKO,MAAxB;;AAEA,WAAK,IAAIN,SAAT,IAAsBK,UAAtB,EAAkC;;AAGhC,YAAME,OAAO,KAAKf,oBAAL,CAA0BQ,SAA1B,CAAb;;AAEA,YAAI,CAACO,IAAD,IAAUJ,UAAU,CAACA,OAAOI,KAAKZ,EAAZ,CAAzB,EAA2C;;AAG3C,YAAMa,SAAS,KAAKC,sBAAL,CAA4BV,IAA5B,EAAkCC,SAAlC,EAA6CC,IAA7C,CAAf;;AAEA,YAAIO,UAAUA,OAAOE,MAArB,EAA6B;AAC3BN,4BAAkBG,KAAKZ,EAAvB,IAA6Ba,MAA7B;AACD;AAEF;;AAED,aAAOJ,iBAAP;AAED;;;;EAhE2CO,uC;;AAmE9C;;kBAEetB,+B","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractMagicEdgeTypeSubscriber.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractMagicEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport AbstractRefEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractRefEdgeTypeSubscriber';\n\n/**\n * @constructor\n */\nclass AbstractMagicEdgeTypeSubscriber extends AbstractRefEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  constructor(allEdgeTypes, options) {\n\n    super(allEdgeTypes, options);\n\n    // later used for edge retrieval to identify those fields that hold connections\n    this.edgeTypesByFieldName = utils.makeHashMap();\n\n    for (let id in allEdgeTypes) {\n\n      const edgeType = allEdgeTypes[id];\n      if (this.canHandle(edgeType)) {\n        this.edgeTypesByFieldName[edgeType.name] = edgeType;\n      }\n    }\n\n  }\n\n  /**\n   * Returns all references to other tiddlers stored in the specified tiddler.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {String} fieldName - the name of the field to get the reference from.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @return {Object<Id, Edge>|null}\n   */\n  getReferencesFromField(tObj, fieldName, toWL) {\n\n    throw new MissingOverrideError(this, 'getReferencesFromField');\n\n  };\n\n  /**\n   * @inheritDoc\n   */\n  getReferences(tObj, toWL, typeWL) {\n\n    const refsGroupedByType = utils.makeHashMap();\n    const fieldNames = tObj.fields;\n\n    for (let fieldName in fieldNames) {\n\n\n      const type = this.edgeTypesByFieldName[fieldName];\n\n      if (!type || (typeWL && !typeWL[type.id])) continue;\n\n\n      const toRefs = this.getReferencesFromField(tObj, fieldName, toWL);\n\n      if (toRefs && toRefs.length) {\n        refsGroupedByType[type.id] = toRefs;\n      }\n\n    }\n\n    return refsGroupedByType;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractMagicEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}