{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/ViewAbstraction.js"],"names":["env","ViewAbstraction","view","options","_registerPaths","isCreate","configTRef","name","getRandomLabel","plural","$tw","wiki","generateNewTitle","$tm","path","views","_createView","exists","getRoot","ResourceNotFoundException","isShadowTiddler","updates","changedTiddlers","edgeTypes","hasKeyWithPrefix","_clearCaches","tiddler","cp","getTiddlerRef","snapshotTRef","asString","date","getTiddler","fields","Date","utils","formatDateString","getBasename","deleteTiddlers","getMatches","filter","getLabel","newLabel","inArray","notify","oldLabel","newRoot","oldRoot","mv","config","sys","defaultView","setEntry","ref","sysUserConf","liveTab","fallbackView","each","tObj","tRef","setField","nodes","getNodeData","id","saveNodeData","isTrue","getConfig","getCacheForTiddler","getPropertiesByPrefix","prefixlessName","startsWith","args","length","prop","setConfig","getWithoutPrefix","val","undefined","logger","match","addTiddler","Tiddler","misc","liveViewLabel","node","regex","escapeRegExp","_getNodeIdFilterPart","getNodeFilter","expr","force","replace","nodeFilterTRef","getEdgeTypeFilter","edgeTypeFilterTRef","_isNodeIncludedById","alwaysAddNodeIdToViewFilter","isMatch","part","separator","setNodeFilter","saveNodePosition","nodeId","f","type","allETy","indeces","src","Object","keys","raw","pretty","getPrettyFilter","matches","getEdgeTypeMatches","whitelist","getLookupTable","isEdgeTypeMatch","getInstance","makeHashMap","compiled","compileFilter","data","mapTRef","parseFieldData","assign","writeFieldData","jsonIndentation","x","y","positions","nodeData","style","pos","p","_getRootPath","forEach","clearCache","isForce","protoView","isHidden","destroy","title","genUUID","field","viewMarker","setEdgeTypeFilter","defaultEdgeTypeFilter","label","hasSubString","tiddlerExists"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/graph/ViewAbstraction.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport utils    from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport * as env from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport {\n  InvalidArgumentException,\n} from '$:/plugins/felixhayashi/tiddlymap/js/exception';\n\n/*** Code **********************************************************/\n\n/**\n * This class abstracts the various pieces that together make up the\n * view such as map, edge filter, node filter, config etc.\n * If {@code isCreate} is not specified, the viewAbstraction will only\n * represent the view and not create it or any missing part of it.\n */\nclass ViewAbstraction {\n\n  /**\n   *\n   * @param {string|ViewAbstraction|Tiddler} view - The view\n   * @param {Object} options\n   * @param {boolean} [options.isCreate] - True if the view should be created and override\n   *     any existing view, false otherwise.\n   */\n  constructor(view, options = {}) {\n\n    if (view instanceof ViewAbstraction) {\n\n      // bounce back the object we received\n      return view;\n\n    }\n\n    this._registerPaths(view);\n\n    if (options.isCreate) {\n\n      if (!this.configTRef) {\n\n        const name = utils.getRandomLabel({plural: true});\n        this.configTRef = $tw.wiki.generateNewTitle(`${$tm.path.views}/${name}`);\n\n      }\n\n      this._createView(options);\n\n    } else if (!ViewAbstraction.exists(this.getRoot())) { // no valid config path\n\n      throw new ResourceNotFoundException('ViewAbstraction', view);\n\n    }\n\n  }\n\n  /**\n   * Returns true if this view cannot be edited.\n   * As a general rule, all views that come as plugins are locked.\n   *\n   * @return {boolean}\n   */\n  isLocked() {\n\n    return $tw.wiki.isShadowTiddler(this.configTRef);\n\n  }\n\n  /**\n   * Gives the view a chance to rebuild its properties cache.\n   *\n   * @param {Updates} updates\n   * @return {boolean} True if changes affect parts of the view.\n   */\n  update(updates) {\n\n    const { changedTiddlers } = updates;\n\n    if (updates[env.path.edgeTypes] || utils.hasKeyWithPrefix(changedTiddlers, this.getRoot())) {\n      this._clearCaches();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * clones the tiddler denoted via tRef and uses it as placeholder\n   * for this view when a widget using this view is displayed in\n   * static mode\n   *\n   * @param {Tiddler} tiddler\n   */\n  addPlaceholder(tiddler) {\n\n    utils.cp(utils.getTiddlerRef(tiddler), this.snapshotTRef, true);\n\n  }\n\n  /**\n   * A view exists if the the view's root exists as tiddler in the store.\n   *\n   * @deprecated\n   *\n   * @return {boolean}\n   */\n  exists() {\n\n    return ViewAbstraction.exists(this);\n\n  }\n\n  /**\n   * The path to the config tiddler that represents the view.\n   *\n   * @return {TiddlerReference}\n   */\n  getRoot() {\n\n    return this.configTRef;\n\n  }\n\n  /**\n   * Returns this view's creation date.\n   *\n   * @param {boolean} [asString] True if the returned value should be a string in any case.\n   * @return {string|object|undefined} The creation date in the specified output format.\n   */\n  getCreationDate(asString) {\n\n    const date = $tw.wiki.getTiddler(this.configTRef).fields['created'];\n\n    if (asString) {\n      // note: th will be translated as well!\n      return (date instanceof Date ? $tw.utils.formatDateString(date, 'DDth MMM YYYY') : '');\n    }\n\n    return date;\n\n  }\n\n  /**\n   * The label of the view (which is basically the root-path's basename).\n   *\n   * @return {string} The label (name) of the view.\n   */\n  getLabel() {\n\n    return utils.getBasename(this.configTRef);\n\n  }\n\n  /**\n   * Method to remove the view and its configuration.\n   * It will make the view non-existent.\n   *\n   * Note: Do not use the object anymore after you called this function!\n   */\n  destroy() {\n\n    // delete the view and all tiddlers stored in its path (map, edge-filter etc.)\n    utils.deleteTiddlers(utils.getMatches(`[prefix[${this.configTRef}]]`));\n\n  }\n\n  /**\n   * Returns all tiddlers include tiddlymap widgets that reference this view.\n   */\n  getOccurrences() {\n\n    const filter = `[regexp:text[<\\\\$(tiddlymap|tmap).*?view=.${this.getLabel()}..*?>]]`;\n    return utils.getMatches(filter);\n\n  }\n\n  /**\n   * Renames the view.\n   *\n   * @param {string} newLabel\n   * @return {boolean}\n   */\n  rename(newLabel) {\n\n    if (typeof newLabel !== 'string') {\n\n      return false;\n    }\n\n    if (utils.inArray('/', newLabel)) {\n\n      $tm.notify('A view name must not contain any \"/\"');\n\n      return false;\n    }\n\n    // keep a reference to the old label before we change it\n    const oldLabel = this.getLabel();\n\n    // start the renaming\n    const newRoot = env.path.views + '/' + newLabel;\n    const oldRoot = this.getRoot();\n\n    utils.mv(oldRoot, newRoot, true);\n\n    // update references\n\n    if ($tm.config.sys.defaultView === oldLabel) {\n      utils.setEntry($tm.ref.sysUserConf, 'defaultView', newLabel);\n    }\n\n    if ($tm.config.sys.liveTab.fallbackView === oldLabel) {\n      utils.setEntry($tm.ref.sysUserConf, 'liveTab.fallbackView', newLabel);\n    }\n\n    $tw.wiki.each((tObj, tRef) => {\n\n      if (tObj.fields['tmap.open-view'] === oldLabel) {\n\n        // update global node data fields referencing this view\n        utils.setField(tRef, 'tmap.open-view', newLabel);\n\n        return;\n\n      }\n\n      if (ViewAbstraction.exists(tRef)) {\n\n        // update all local node data referencing this view\n        const view = new ViewAbstraction(tRef);\n        const nodes = view.getNodeData();\n\n        for (let id in nodes) {\n          if (nodes[id]['open-view'] === oldLabel) {\n            nodes[id]['open-view'] = newLabel;\n          }\n        }\n\n        view.saveNodeData(nodes);\n\n      }\n\n    });\n\n    // clear caches registered to previous root before registering new paths\n    this._clearCaches();\n    this._registerPaths(newLabel);\n\n  }\n\n  /**\n   * All configurations that are toggled via checkboxes to have a value\n   * either `true` or `false` can be accessed via this method.\n   *\n   * @param {string} name - The configs name without the `_config` prefix.\n   * @return {boolean} True if the configuration is enabled, false otherwise.\n   */\n  isEnabled(name) {\n\n    return utils.isTrue(this.getConfig(name), false);\n\n  }\n\n  /**\n   * Returns a configuration value relating to the given name. If no name\n   * is given, an object with all configurations is returned.\n   *\n   * @param {string} [name] - Instead of all configurations being returned,\n   *     only the configuration named name is returned. The initial \"config.\"\n   *     may be omitted.\n   * @result {string|Object} If `type` is not specified an object containing\n   *     all configurations is returned, otherwise a single value will be returned.\n   */\n  getConfig(name) {\n\n    const config = $tw.wiki.getCacheForTiddler(this.configTRef, \"tmap-config\", () => {\n\n      const fields = utils.getTiddler(this.configTRef).fields;\n      return utils.getPropertiesByPrefix(fields, 'config.');\n\n    });\n\n    const prefixlessName = name && utils.startsWith(name, 'config.') ? name : `config.${name}`;\n\n    return (name ? config[prefixlessName] : config);\n\n  }\n\n  /**\n   * Enables the api user to modify the view's configuration.\n   *\n   * In case two arguments are provided, the first is assumed to be the property\n   * name and the second the value to be set.\n   *\n   * In case a single object is provided as argument, it is treated as a key-value\n   * collection and each property in this object is saved as config.\n   *\n   * @param {*} args\n   */\n  setConfig(...args) {\n\n    if (args[0] == null) { // null or undefined\n\n      return;\n    }\n\n    if (args.length === 1 && typeof args[0] === 'object') {\n\n      for (let prop in args[0]) {\n        this.setConfig(prop, args[0][prop]);\n      }\n\n    } else if (args.length === 2 && typeof args[0] === 'string') {\n\n      const prop = utils.getWithoutPrefix(args[0], 'config.');\n      let val = args[1];\n\n      if (val === undefined) {\n\n        return;\n      }\n\n      const config = this.getConfig();\n\n      if (val === null) {\n\n        $tm.logger('debug', 'Removing config', prop);\n        delete config[`config.${prop}`];\n\n      } else {\n\n        if (prop === 'edge_type_namespace') {\n          const match = val.match(/[^:]+/);\n          val = (match ? match[0] : '');\n        }\n\n      }\n\n      $tm.logger('log', 'Setting config', prop, val);\n      config[`config.${prop}`] = val;\n\n      // save\n      $tw.wiki.addTiddler(new $tw.Tiddler(\n        utils.getTiddler(this.configTRef),\n        config\n      ));\n\n    } else { // not allowed\n\n      throw new InvalidArgumentException(...args);\n\n    }\n\n  }\n\n  /**\n   * Whether this view represents the 'live view'\n   *\n   * @return {boolean}\n   */\n  isLiveView() {\n\n    return (this.getLabel() === $tm.misc.liveViewLabel);\n\n  }\n\n  /**\n   * Whether the node is already explicitly contained in the view's node filter,\n   * i.e. whether it is explicitly referenced by its title.\n   *\n   * @private\n   *\n   * @param {Node} node\n   * @return {string}\n   */\n  _isNodeIncludedById(node) {\n\n    const regex = $tw.utils.escapeRegExp(ViewAbstraction._getNodeIdFilterPart(node));\n\n    return this.getNodeFilter('raw').match(regex);\n\n  }\n\n  /**\n   * Sets and rebuilds the node filter according to the expression provided.\n   *\n   * @param {string} expr - A tiddlywiki filter expression.\n   * @param {boolean} force\n   */\n  setNodeFilter(expr, force) {\n\n    expr = expr.replace(/[\\n\\r]/g, ' ');\n\n    if (this.getNodeFilter('raw') === expr) {\n      // already up to date;\n      // This check is critical to prevent recursion!\n      return;\n    }\n\n    utils.setField(this.nodeFilterTRef, 'filter', expr);\n\n    $tm.logger('debug', 'Node filter set to', expr);\n\n  }\n\n  /**\n   * Sets and rebuilds the edge type filter according to the expression provided.\n   *\n   * @param {string} expr - A tiddlywiki filter expression.\n   */\n  setEdgeTypeFilter(expr) {\n\n    expr = expr.replace(/[\\n\\r]/g, ' ');\n\n    if (this.getEdgeTypeFilter('raw') === expr) { // already up to date\n      // This check is critical to prevent recursion!\n      return;\n    }\n\n    utils.setField(this.edgeTypeFilterTRef, 'filter', expr);\n\n    $tm.logger('debug', 'Edge filter set to', expr);\n\n  }\n\n  /**\n   * Method to append a filter part to the current filter (*or*-style).\n   * The node's tmap.id will be used in the filter to reference the corresponding tiddler.\n   *\n   * @param {Node} node\n   */\n  addNode(node) {\n\n    if (!this._isNodeIncludedById(node)) {\n\n      // @see https://github.com/felixhayashi/TW5-TiddlyMap/issues/285\n      if (\n        utils.isTrue($tm.config.sys.alwaysAddNodeIdToViewFilter) ||\n        !utils.isMatch(node.tRef, this.getNodeFilter('compiled'))\n      ) {\n\n        const part = ViewAbstraction._getNodeIdFilterPart(node);\n        const separator = ' ';\n        this.setNodeFilter(this.getNodeFilter('raw') + separator + part);\n\n      }\n\n      this.saveNodePosition(node);\n\n    }\n\n  }\n\n  /**\n   * Removes a node from the the view filter that has been\n   * explicitly added before.\n   *\n   * ATTENTION: Never remove the node data (i.e. style and positions)\n   * from the node-data store. This will be done by a garbage\n   * collector. See Adapter.prototype._removeObsoleteViewData\n   *\n   * @return {boolean} True if node was removed, false otherwise.\n   *     Note: false is also returned if the node did not exist before.\n   */\n  removeNode(nodeId) {\n\n    if (!this._isNodeIncludedById(nodeId)) {\n\n      return false;\n    }\n\n    const part = ViewAbstraction._getNodeIdFilterPart(nodeId);\n    const f = this.getNodeFilter('raw').replace(part, '');\n\n    this.setNodeFilter(f);\n\n    if (this.getNodeData(nodeId)) {\n      this.saveNodeData(nodeId, null);\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Method will return a tiddlywiki edge-type filter that is used to\n   * decide which edge types are displayed by the graph.\n   *\n   * Note: needs to be recalculated if the collection of edge types changed\n   * in the wiki.\n   *\n   * @param {(\"raw\"|\"pretty\"|\"matches\"|\"whitelist\")} [type]\n   *     Use this param to control the output type.\n   * @result {*}\n   *     Depends on the type param:\n   *     - raw: the original filter string\n   *     - pretty: the prettyfied filter string for usage in textareas\n   *     - matches: {Array<string>} all matches\n   *     - whitelist: A lookup table where all matches are true\n   */\n  getEdgeTypeFilter(type) {\n\n    const filter = $tw.wiki.getCacheForTiddler(this.edgeTypeFilterTRef, \"tmap-edgeTypeFilter\", () => {\n\n      const allETy = $tm.indeces.allETy;\n      const src = Object.keys(allETy);\n      const tObj = $tw.wiki.getTiddler(this.edgeTypeFilterTRef);\n\n      let filter = {};\n      filter.raw = (tObj && tObj.fields.filter || '');\n      filter.pretty = utils.getPrettyFilter(filter.raw);\n      filter.matches = utils.getEdgeTypeMatches(filter.raw, allETy);\n      filter.whitelist = utils.getLookupTable(filter.matches);\n\n      return filter;\n\n    });\n\n    return (type ? filter[type] : filter);\n\n  }\n\n  /**\n   * Whether or not this EdgeType is visible in this view.\n   *\n   * @param {EdgeType|string} id\n   * @return {*}\n   */\n  isEdgeTypeVisible(id) {\n\n    return utils.isEdgeTypeMatch(EdgeType.getInstance(id).id, this.getEdgeTypeFilter(\"raw\"));\n\n  }\n\n  /**\n   * Method will return a tiddlywiki node filter that is used to\n   * decide which nodes are displayed by the graph.\n   *\n   * @param {(\"raw\"|\"pretty\"|\"compiled\")} [type] - Use this param to control the output type.\n   * @result {*}\n   *     Depends on the type param:\n   *     - raw: the original filter string\n   *     - pretty: the prettyfied filter string for usage in textareas\n   *     - compiled: {Array<string>} all matches\n   */\n  getNodeFilter(type) {\n\n    const filter = $tw.wiki.getCacheForTiddler(this.nodeFilterTRef, \"tmap-nodeFilter\", () => {\n\n      let filter = utils.makeHashMap();\n      const tObj = $tw.wiki.getTiddler(this.nodeFilterTRef);\n\n      filter.raw = (tObj && tObj.fields.filter) || '';\n      filter.pretty = utils.getPrettyFilter(filter.raw);\n      filter.compiled = $tw.wiki.compileFilter(filter.raw);\n\n      return filter;\n\n    });\n\n    return (type ? filter[type] : filter);\n\n  }\n\n  /**\n   * This method will return the node data stored in the view.\n   *\n   * @todo When to delete obsolete data?\n   *\n   * @param {string} nodeId\n   * @result {Hashmap<Id, Object>} A Hashmap with node data.\n   */\n  getNodeData(nodeId) {\n\n    const data = $tw.wiki.getCacheForTiddler(this.mapTRef, \"tmap-map\", () => utils.parseFieldData(this.mapTRef, 'text', {}));\n\n    return (nodeId ? data[nodeId] : data);\n\n  }\n\n  /**\n   * A view equals another view either\n   *\n   * 1) if the js objects reference the same objects in the js runtime\n   * 2) or if the views have the same root and both views exist\n   *\n   * @param view\n   * @return {boolean}\n   */\n  equals(view) {\n\n    return view === this\n      || (ViewAbstraction.exists(view) && (new ViewAbstraction(view)).getRoot() === this.getRoot());\n\n  }\n\n  /**\n   * This function will merge the given data in the view's node store.\n   *\n   * If a property is set to null, it will be removed.\n   *\n   * If two arguments are provided, the first parameter is assumed\n   * to be a node id and the second to be the data object. The data\n   * will extend the existing data. If data is not an object, it is\n   * assumed to be a delete directive and consequently the node data\n   * in the store will be deleted.\n   *\n   * Otherwise, if a single object parameter is provided, it is regarded\n   * as a node collection and the whole object is used to extend the store.\n   *\n   * Note: The Adapter will routinely delete node content of nodes that are\n   * not contained in the view anymore.\n   */\n  saveNodeData(...args) {\n\n    const data = this.getNodeData();\n\n    if (args.length === 2) {\n\n      if (typeof args[1] === 'object') {\n\n        if (args[1] === null) {\n\n          delete data[args[0]];\n\n        } else {\n\n          data[args[0]] = Object.assign(data[args[0]] || {}, args[1]);\n        }\n      }\n\n    } else if (args.length === 1 && typeof args[0] === 'object') {\n\n      $tm.logger('log', 'Storing data in', this.mapTRef);\n\n      Object.assign(data, args[0]);\n\n    } else { // not allowed\n\n      throw new InvalidArgumentException(...args);\n    }\n\n    utils.writeFieldData(this.mapTRef, 'text', data, $tm.config.sys.jsonIndentation);\n\n  }\n\n  /**\n   * Saves a node's position to the store\n   *\n   * @param {Node} node\n   */\n  saveNodePosition(node) {\n\n    if (node.id && node.x != null && node.y != null) {\n      // only pass coordinates to prevent other data from being stored!\n      this.saveNodeData(node.id, { x: node.x, y: node.y });\n    }\n\n  }\n\n  /**\n   * Saves a node's position to the store\n   *\n   * @param {Object} positions\n   */\n  saveNodePositions(positions) {\n\n    const nodeData = this.getNodeData();\n\n    for (let id in positions) {\n\n      nodeData[id] = nodeData[id] || {};\n      nodeData[id].x = positions[id].x;\n      nodeData[id].y = positions[id].y;\n\n    }\n\n    this.saveNodeData(nodeData);\n\n  }\n\n  /**\n   * Marks the node with the given id as central topic.\n   *\n   * @param nodeId\n   */\n  setCentralTopic(nodeId) {\n\n    this.setConfig('central-topic', nodeId);\n\n  }\n\n  /**\n   * Saves the provided style for the node with the specified id in the view's store.\n   *\n   * Note: The coordinates of the node on the map are not stored via this function.\n   * For this task, use saveNodePosition() instead.\n   *\n   * @param {string} nodeId\n   * @param {Object} style\n   */\n  saveNodeStyle(nodeId, style) {\n\n    // remove any previos style from store;\n    // @TODO: optimize this only null in style var needs to be removed\n    const data = this.getNodeData(nodeId) || {};\n\n    const pos = { x: data.x, y: data.y };\n\n    // tabula rasa! delete all previous properties\n    for (let p in data) {\n      delete data[p];\n    }\n\n    // save new style\n    this.saveNodeData(nodeId, {\n      ...style,\n      ...pos\n    });\n\n  }\n\n  /**\n   * The view's configTiddlerRef is stored in different tiddlers (paths).\n   * This function registers these paths to this the view instance.\n   *\n   * @private\n   * @params {ViewAbstraction|string} view\n   */\n  _registerPaths(view, isCreate) {\n\n    // main config is stored here\n    this.configTRef = ViewAbstraction._getRootPath(view);\n\n    // store for node properties (positions and local node styles)\n    this.mapTRef = `${this.configTRef}/map`;\n\n    // filter stores\n    this.nodeFilterTRef = `${this.configTRef}/filter/nodes`;\n    this.edgeTypeFilterTRef = `${this.configTRef}/filter/edges`;\n\n    this.snapshotTRef = `${this.getRoot()}/snapshot`;\n\n  }\n\n  /**\n   * This will clear all cached tiddlers related to this view.\n   *\n   * @private\n   * @return {boolean} true if the cache was dirty, false if cache was up-to-date and did\n   */\n  _clearCaches() {\n    // clear all tiddler-caches below this path\n    utils\n      .getMatches(`[prefix[${this.getRoot()}]]`)\n      .forEach(tRef => { $tw.wiki.clearCache(tRef); });\n  }\n\n  /**\n   * Will create the config tiddler which means that the view will\n   * start to exist.\n   *\n   * @private\n   */\n  _createView({ isForce, protoView, isHidden } = {}) {\n\n    // destroy any former view that existed in this path\n    if (ViewAbstraction.exists(this)) {\n\n      if (!isForce) {\n\n        return;\n\n      }\n\n      this.destroy();\n    }\n\n    if (ViewAbstraction.exists(protoView)) {\n      utils.cp((new ViewAbstraction(protoView)).getRoot(), this.configTRef, true);\n    }\n\n    // create new view\n    const fields = {\n      title: this.configTRef,\n      id: utils.genUUID(), // maybe useful for future purposes…\n    };\n\n    if (!isHidden) {\n      fields[$tm.field.viewMarker] = true;\n    }\n\n    $tw.wiki.addTiddler(new $tw.Tiddler(\n      utils.getTiddler(this.configTRef), // in case we cloned the view\n      fields\n    ));\n\n    this.setEdgeTypeFilter(env.filter.defaultEdgeTypeFilter);\n\n  }\n\n  /**\n   * Will return a filter part that matches the node's id.\n   *\n   * E.g. [field:tmap.id[1748576e-74bb-4165-85bb-0d312e3e4f1f]]\n   *\n   * @private\n   *\n   * @param node\n   * @return {string}\n   */\n  static _getNodeIdFilterPart(node) {\n\n    const id = (typeof node === 'object' ? node.id : node);\n\n    return `[field:tmap.id[${id}]]`;\n\n  }\n\n  /**\n   * Will return the path to the config tiddler of this view, aka the view's root.\n   *\n   * @private\n   *\n   * @param {*} view - The constructor param to abstract or create the view.\n   * @result {string|undefined} The view config path.\n   */\n  static _getRootPath(view) {\n\n    if (view instanceof ViewAbstraction) {\n\n      return view.configTRef;\n\n    }\n\n    if (view instanceof $tw.Tiddler) { // is a tiddler object\n\n      view  = view.fields.title;\n\n    }\n\n    if (typeof view === 'string') {\n\n      // remove prefix and slash\n      const label = utils.getWithoutPrefix(view, `${$tm.path.views}/`);\n\n      // a valid label must not contain any slashes\n      if (label && !utils.hasSubString(label, '/')) {\n\n        return `${$tm.path.views}/${label}`;\n\n      }\n    }\n\n  }\n\n  /**\n   * A view exists if the the view's root exists as tiddler in the store.\n   *\n   * @return {ViewAbstraction|string}\n   */\n  static exists(view) {\n\n    if (!view) {\n\n      return false;\n    }\n\n    if (view instanceof ViewAbstraction) {\n\n      view = view.configTRef;\n\n    } else {\n\n      view = ViewAbstraction._getRootPath(view);\n    }\n\n    return utils.tiddlerExists(view);\n\n  }\n\n}\n\n/*** Exports *******************************************************/\n\nexport default ViewAbstraction;\n"],"sourceRoot":"../../../../../../src/plugins"}