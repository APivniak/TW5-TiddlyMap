{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["Object","defineProperty","exports","value","tiddlymap","tmap","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_CallbackManager","require","_CallbackManager2","_interopRequireDefault","_ViewAbstraction","_ViewAbstraction2","_EdgeType","_EdgeType2","_Popup","_Popup2","_vis","_vis2","_widget","_utils","_utils2","_SelectionRectangle","_SelectionRectangle2","_environment","env","_interopRequireWildcard","obj","__esModule","newObj","default","_defineProperty","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MapWidget","_Widget","parseTreeNode","options","this","_this","getPrototypeOf","getAttr","getAttribute","isDebug","utils","isTrue","$tm","config","sys","debug","bindTo","callbackManager","CallbackManager","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","tmap:tm-create-view","handleCreateView","tmap:tm-rename-view","handleRenameView","tmap:tm-delete-view","handleDeleteView","tmap:tm-delete-element","handleDeleteElement","tmap:tm-edit-view","handleEditView","tmap:tm-generate-widget","handleGenerateWidget","tmap:tm-toggle-central-topic","handleSetCentralTopic","tmap:tm-save-canvas","handleSaveCanvas","tmap:tm-focus-node","handleFocusNode","tmap:tm-reset-focus","repaintGraph","tmap:tm-neighbourhood-reset-trace","tmapTmNeighbourhoodResetTrace","initAndRenderGraph","graphDomNode","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","handleVisDragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","DOMMouseScroll","contextmenu","handleContextMenu","MozMousePixelScroll","handleExtraCanvasScroll","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","to","handleConnectionEvent","edge","callback","_this2","eTyFilter","view","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","getLabel","raw","dialogManager","open","isConfirmed","outTObj","str","getText","type","EdgeType","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","checkForFreshInstall","getEntry","ref","sysMeta","setEntry","args","dialog","preselects","config.storyview","config.navigation","config.sidebar","config.demo","getPropertiesByPrefix","fields","tiddlerExists","setText","misc","defaultViewLabel","n1","insertNode","x","y","n2","keys","touch","openStandardConfirmDialog","message","logger","slice","unshift","apply","render","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","addClass","appendChild","isPreviewed","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","window","addLoadingBar","tooltip","Popup","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","isTiddlyWikiFakeDom","contains","rebuildEditorBar","reloadRefreshTriggers","registry","push","mainEditorId","url","query","toggleEnlargedMode","setView","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","viewHolder","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","isShowNeighbourhood","isEnabled","tracingBtnClass","neighScopeBtnClass","rasterMenuBtnClass","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","refresh","changedTiddlers","update","updates","network","isZombieWidget","isViewSwitched","hasChangedAttributes","trace","makeHashMap","reloadBackgroundImage","isViewUpdated","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","hidePopups","isForce","hide","remove","refreshTriggers","parseStringArray","add","handleTriggeredRefresh","_ref","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","preventZoom","Date","now","stabilize","getContainer","_this3","start","originalMatches","getMatches","getNodeFilter","clickPathMatches","combinedMatches","filter","tRef","graph","getGraph","matches","includeNeighboursOf","includes","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","ViewAbstraction","maybeMatches","inGraph","isSystemOrDraft","modified","nodeFilter","_this4","_destructVis","getVisOptions","vis","DataSet","setEnabled","enabled","Network","canvas","getElementsByTagName","networkDomNode","tabIndex","event","on","bind","addGraphButtons","fullscreen-button","fullscreenButton","halfscreen-button","halfscreenButton","focus","isLiveView","ev","_this5","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","role","ucFirst","openTiddlerWithId","altKey","metaKey","scopeStr","fromCharCode","setConfig","handleRemoveElements","getSelection","paramObject","elements","buttons","selectRect","selectedNodes","redraw","stopPropagation","mouse","DOMtoCanvas","offsetX","offsetY","SelectionRectangle","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","interaction","isVisSettingInSync","zoomView","_this6","nodeId","getNodeAt","show","div","mode","registerTransclude","contextMenuWidget","focusButtonStateTRef","deleteByPrefix","clipBoard","ids","addNode","get","returnType","removeNode","_this7","globalOptions","localOptions","parseJSON","_ref2","layout","hierarchical","corrections","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","addEdge","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","isVisInEditMode","getElementsByClassName","_this8","getField","isClone","newView","isCreate","protoView","_this9","isLocked","references","getOccurrences","count","toString","refFilter","joinAndWrap","rename","_this10","visInherited","JSON","stringify","viewConfig","filter.prettyNodeFltr","filter.prettyEdgeFltr","vis-inherited","createdOn","getCreationDate","numberOfNodes","numberOfEdges","extend","prvBg","saveNodePositions","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","_this11","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","snapshot","width","height","action","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","addPlaceholder","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","text","getCreationFields","getModificationFields","stripPreamble","toDataURL","getWithoutPrefix","_this12","viewname","destroy","msg","trigger","curTiddler","liveTab","fallbackView","_ref3","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","_this13","tiddlers","params","stringifyList","delete-from","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","_ref4","setCentralTopic","properties","idsOfNodesWithoutPosition","setNodesMoveable","fitGraph","_ref5","scale","animation","_this14","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","_this15","isMatch","makeNode","tObj","draft.title","_this16","tracker","getTiddlerById","globalDefaults","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","getNodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","inherited-global-default-style","inherited-local-default-style","inherited-group-styles","global.tmap.style","local-node-style","addToPreselects","scope","store","global","p","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","_ref6","_this17","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","style","evt","selected","button","_ref7","isDraggingAllowed","_ref8","defaultColor","colorObj","highlight","hover","_ref9","pos","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","fill","constructTooltip","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isShown","populator","_ref10","total","display","setAttribute","_ref11","destruct","_this18","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","noCache","_this19","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","setGraphButtonEnabled","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","Widget"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph,\n      'tmap:tm-neighbourhood-reset-trace': () => { this.initAndRenderGraph(this.graphDomNode); }\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n      // Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n      'MozMousePixelScroll': [ this.handleExtraCanvasScroll, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    const args = {\n      dialog: {\n        preselects: {\n          \"config.storyview\": \"true\",\n          \"config.navigation\": \"true\",\n          \"config.sidebar\": \"true\",\n          \"config.demo\": \"true\",\n        }\n      }\n    };\n\n    $tm.dialogManager.open('welcome', args, (isConfirmed, outTObj) => {\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      if (config['storyview'] && utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n        utils.setText('$:/view', 'top');\n      }\n\n      if (config['navigation']) {\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n      }\n\n      if (config['sidebar']) {\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n      }\n\n      if (config['demo']) {\n        const view = $tm.misc.defaultViewLabel;\n\n        const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n        const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n        $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n      }\n\n      if (Object.keys(config).length) {\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/tiddlymap');\n      }\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this)) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      isShowNeighbourhood: String(view.isEnabled('neighbourhood_scope')),\n      tracingBtnClass: view.isEnabled('neighbourhood_trace_clicks') ? activeUnicodeBtnClass : unicodeBtnClass,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (\n       this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched or config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n\n      this.trace = utils.makeHashMap();\n\n      this.rebuildEditorBar();\n      this.reloadBackgroundImage();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n      const preventZoom = this.isPreventZoomOnNextUpdate == null\n        ? false\n        : typeof this.isPreventZoomOnNextUpdate === 'number'\n          ? this.isPreventZoomOnNextUpdate > Date.now()\n          : this.isPreventZoomOnNextUpdate;\n\n      if (!preventZoom) {\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      if (typeof this.isPreventZoomOnNextUpdate !== 'number') {\n        this.isPreventZoomOnNextUpdate = false;\n      }\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n\n    // only show neihbours for selected node\n\n    const originalMatches = utils.getMatches(this.view.getNodeFilter('compiled'));\n    const clickPathMatches = Object.keys(this.trace);\n    const combinedMatches = [\n      ...originalMatches.filter(tRef => !this.trace[tRef]),\n      ...clickPathMatches,\n    ];\n\n    const graph = $tm.adapter.getGraph({\n      view: this.view,\n      matches: combinedMatches,\n      includeNeighboursOf: this.view.isEnabled(\"neighbourhood_include_traced_node_neighbours\")\n        ? tRef => combinedMatches.includes(tRef)\n        : tRef => originalMatches.includes(tRef)\n    });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   * Also if a view suddenly doesn't exist anymore we consider this\n   * a trigger for a view change.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return (\n      !ViewAbstraction.exists(this.view)\n      || changedTiddlers[this.getViewHolderRef()]\n    );\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n    this.trace = utils.makeHashMap();\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n    if (this.view.isLiveView()) {\n      // directly trigger refresh so we add  currently focussed as traced node\n      this.trace[utils.getText(this.refreshTriggers[0])] = true;\n    }\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.altKey || ev.metaKey) {\n      ev.preventDefault();\n\n      if (ev.keyCode >= 48 && ev.keyCode <= 57) { // 0 through 9\n        const scopeStr = String.fromCharCode(ev.keyCode);\n        this.view.setConfig('neighbourhood_scope', scopeStr);\n      }\n    } else {\n      if (ev.keyCode === 46) { // delete\n        ev.preventDefault();\n        this.handleRemoveElements(this.network.getSelection());\n      }\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * This handles the extraneous event fired by Firefox whenever a\n   * DOMMouseScroll event occurs. We just want to swallow it.\n   * Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n   */\n  handleExtraCanvasScroll(ev) {\n    ev.preventDefault();\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis')) || {};\n\n    const { hierarchical } = (localOptions.layout || {})\n    const corrections = {\n      layout: {\n        hierarchical: {\n          enabled: (\n            hierarchical === undefined || hierarchical === null\n              ? false\n              : typeof hierarchical === 'boolean'\n                ? hierarchical\n                : hierarchical.enabled !== false\n          )\n        }\n      }\n    };\n\n    // we need to first merge local options with corrections to prevent that\n    // global options are overridden by e.g. \"hierarchical\" being a non-object\n    const options = utils.merge({}, globalOptions, utils.merge(localOptions, corrections));\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(\n      new $tw.Tiddler(\n        {\n          title: tRef,\n          type: 'image/png',\n          text: this.getSnapshot(true)\n        },\n        $tw.wiki.getCreationFields(),\n        $tw.wiki.getModificationFields()\n      )\n    );\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    const curTiddler = utils.getTiddler(utils.getText(trigger));\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      if (curTiddler) {\n        this.trace[curTiddler.fields.title] = true;\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we copy the object since we intend to modify it.\n    // NOTE: A deep copy would be needed if a nested property were modified\n    //       In that case, use $tw.utils.deepCopy.\n    const nodeData = { ...this.view.getNodeData(node.id) };\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n    if (properties.nodes.length || properties.edges.length) {\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n        this.handleOpenMapElementEvent(properties);\n      }\n    } else { // = clicked on an empty spot\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n    }\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n      const node = this.graphData.nodesById[nodes[0]];\n      if (this.view.isEnabled('neighbourhood_trace_clicks')) {\n        this.trace[$tm.adapter.getTiddlerById(node.id)] = true;\n        this.isPreventZoomOnNextUpdate = Date.now() + 500;\n        this.rebuildGraph();\n\n        if (this.view.isEnabled('neighbourhood_focus_newly_traced_node')) {\n          setTimeout(() => {\n            this.network.focus(node.id, {\n              scale: 1,\n              animation: true\n            });\n          }, 1500);\n        }\n      }\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    if (!this.isDraggingAllowed(nodes)) {\n      return;\n    }\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  isDraggingAllowed({ nodes }) {\n    return (\n      this.editorMode || this.view.isEnabled('physics_mode')\n    );\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (\n      !nodes.length ||\n      // we do not allow nodes to be dragged if not in editor mode\n      // except cases physics is enabled\n      !this.isDraggingAllowed(nodes)\n    ) {\n      return;\n    }\n\n    this.hidePopups(0, true);\n    this.assignActiveStyle(nodes);\n    this.setNodesMoveable(nodes, true);\n\n    if (nodes.length === 1) {\n      this.draggedNode = nodes[0];\n    }\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // we don't wait til next render-cycle (which would leave tiddlymap in\n    // a rather undefined state) but update immediately.\n    this.update({\n      changedTiddlers: {\n        [viewHolderRef]: true\n      }\n    });\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}