{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["env","MapWidget","parseTreeNode","options","getAttr","getAttribute","isDebug","utils","isTrue","$tm","config","sys","debug","bindTo","callbackManager","CallbackManager","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","handleCreateView","handleRenameView","handleDeleteView","handleDeleteElement","handleEditView","handleGenerateWidget","handleSetCentralTopic","handleSaveCanvas","handleFocusNode","repaintGraph","initAndRenderGraph","graphDomNode","visListeners","handleVisSingleClickEvent","handleVisDoubleClickEvent","handleVisStabilizedEvent","handleVisSelectNode","handleVisDeselectNode","handleVisDragStart","handleVisDragEnd","handleVisHoverElement","handleVisBlurElement","handleVisBeforeDrawing","handleVisAfterDrawing","handleVisLoading","handleVisLoadingDone","windowDomListeners","handleResizeEvent","handleClickEvent","handleCanvasMouseMove","canvasDomListeners","handleCanvasKeyup","handleCanvasKeydown","handleCanvasScroll","handleContextMenu","handleExtraCanvasScroll","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","from","to","edge","callback","eTyFilter","view","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","getLabel","raw","dialogManager","open","isConfirmed","outTObj","str","getText","type","EdgeType","getInstance","namespace","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","getEntry","ref","sysMeta","setEntry","args","dialog","preselects","getPropertiesByPrefix","fields","tiddlerExists","setText","misc","defaultViewLabel","n1","insertNode","x","y","n2","Object","keys","length","touch","message","Array","prototype","slice","call","arguments","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","addClass","appendChild","isPreviewed","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","window","addLoadingBar","tooltip","Popup","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","isTiddlyWikiFakeDom","contains","rebuildEditorBar","reloadRefreshTriggers","registry","push","checkForFreshInstall","mainEditorId","url","query","toggleEnlargedMode","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","viewHolder","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","isShowNeighbourhood","isEnabled","tracingBtnClass","neighScopeBtnClass","rasterMenuBtnClass","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","changedTiddlers","updates","network","isZombieWidget","refresh","isViewSwitched","hasChangedAttributes","trace","makeHashMap","reloadBackgroundImage","isViewUpdated","update","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","isForce","hide","remove","refreshTriggers","parseStringArray","i","add","handleTriggeredRefresh","hidePopups","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","preventZoom","Date","now","stabilize","start","originalMatches","getMatches","getNodeFilter","clickPathMatches","combinedMatches","filter","tRef","graph","getGraph","matches","includeNeighboursOf","includes","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","ViewAbstraction","maybeMatches","inGraph","isSystemOrDraft","modified","nodeFilter","_destructVis","getVisOptions","vis","DataSet","setEnabled","enabled","Network","canvas","getElementsByTagName","networkDomNode","tabIndex","event","on","bind","addGraphButtons","focus","isLiveView","ev","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","role","ucFirst","handleConnectionEvent","openTiddlerWithId","altKey","metaKey","scopeStr","fromCharCode","setConfig","handleRemoveElements","getSelection","paramObject","elements","buttons","selectRect","selectedNodes","redraw","stopPropagation","target","mouse","DOMtoCanvas","offsetX","offsetY","SelectionRectangle","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","interaction","isVisSettingInSync","zoomView","nodeId","getNodeAt","show","div","mode","registerTransclude","contextMenuWidget","render","focusButtonStateTRef","deleteByPrefix","clipBoard","ids","addNode","get","returnType","removeNode","globalOptions","localOptions","parseJSON","layout","hierarchical","corrections","undefined","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","addEdge","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","getElementsByClassName","getField","isClone","newView","isCreate","protoView","setView","isLocked","references","getOccurrences","count","toString","refFilter","joinAndWrap","rename","visInherited","JSON","stringify","viewConfig","createdOn","getCreationDate","numberOfNodes","numberOfEdges","extend","prvBg","saveNodePositions","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","snapshot","width","height","action","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","addPlaceholder","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","text","getCreationFields","getModificationFields","stripPreamble","toDataURL","getWithoutPrefix","viewname","openStandardConfirmDialog","destroy","msg","trigger","curTiddler","liveTab","fallbackView","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","tiddlers","params","stringifyList","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","setCentralTopic","properties","idsOfNodesWithoutPosition","setNodesMoveable","fitGraph","scale","animation","getContainer","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","isMatch","makeNode","tObj","tracker","getTiddlerById","globalDefaults","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","getNodeData","field","nodeIcon","nodeLabel","addToPreselects","scope","store","global","p","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","style","evt","selected","button","isDraggingAllowed","isArray","defaultColor","colorObj","highlight","hover","pos","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","fill","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isVisInEditMode","isShown","populator","constructTooltip","total","display","setAttribute","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","noCache","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","setGraphButtonEnabled","Widget","tmap","tiddlymap"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph,\n      'tmap:tm-neighbourhood-reset-trace': () => { this.initAndRenderGraph(this.graphDomNode); }\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n      // Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n      'MozMousePixelScroll': [ this.handleExtraCanvasScroll, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    const args = {\n      dialog: {\n        preselects: {\n          \"config.storyview\": \"true\",\n          \"config.navigation\": \"true\",\n          \"config.sidebar\": \"true\",\n          \"config.demo\": \"true\",\n        }\n      }\n    };\n\n    $tm.dialogManager.open('welcome', args, (isConfirmed, outTObj) => {\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      if (config['storyview'] && utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n        utils.setText('$:/view', 'top');\n      }\n\n      if (config['navigation']) {\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n      }\n\n      if (config['sidebar']) {\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n      }\n\n      if (config['demo']) {\n        const view = $tm.misc.defaultViewLabel;\n\n        const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n        const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n        $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n      }\n\n      if (Object.keys(config).length) {\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/tiddlymap');\n      }\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this)) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      isShowNeighbourhood: String(view.isEnabled('neighbourhood_scope')),\n      tracingBtnClass: view.isEnabled('neighbourhood_trace_clicks') ? activeUnicodeBtnClass : unicodeBtnClass,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (\n       this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched or config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n\n      this.trace = utils.makeHashMap();\n\n      this.rebuildEditorBar();\n      this.reloadBackgroundImage();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n      const preventZoom = this.isPreventZoomOnNextUpdate == null\n        ? false\n        : typeof this.isPreventZoomOnNextUpdate === 'number'\n          ? this.isPreventZoomOnNextUpdate > Date.now()\n          : this.isPreventZoomOnNextUpdate;\n\n      if (!preventZoom) {\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      if (typeof this.isPreventZoomOnNextUpdate !== 'number') {\n        this.isPreventZoomOnNextUpdate = false;\n      }\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n\n    // only show neihbours for selected node\n\n    const originalMatches = utils.getMatches(this.view.getNodeFilter('compiled'));\n    const clickPathMatches = Object.keys(this.trace);\n    const combinedMatches = [\n      ...originalMatches.filter(tRef => !this.trace[tRef]),\n      ...clickPathMatches,\n    ];\n\n    const graph = $tm.adapter.getGraph({\n      view: this.view,\n      matches: combinedMatches,\n      includeNeighboursOf: this.view.isEnabled(\"neighbourhood_include_traced_node_neighbours\")\n        ? tRef => combinedMatches.includes(tRef)\n        : tRef => originalMatches.includes(tRef)\n    });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   * Also if a view suddenly doesn't exist anymore we consider this\n   * a trigger for a view change.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return (\n      !ViewAbstraction.exists(this.view)\n      || changedTiddlers[this.getViewHolderRef()]\n    );\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n    this.trace = utils.makeHashMap();\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n    if (this.view.isLiveView()) {\n      // directly trigger refresh so we add  currently focussed as traced node\n      this.trace[utils.getText(this.refreshTriggers[0])] = true;\n    }\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.altKey || ev.metaKey) {\n      ev.preventDefault();\n\n      if (ev.keyCode >= 48 && ev.keyCode <= 57) { // 0 through 9\n        const scopeStr = String.fromCharCode(ev.keyCode);\n        this.view.setConfig('neighbourhood_scope', scopeStr);\n      }\n    } else {\n      if (ev.keyCode === 46) { // delete\n        ev.preventDefault();\n        this.handleRemoveElements(this.network.getSelection());\n      }\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * This handles the extraneous event fired by Firefox whenever a\n   * DOMMouseScroll event occurs. We just want to swallow it.\n   * Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n   */\n  handleExtraCanvasScroll(ev) {\n    ev.preventDefault();\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis')) || {};\n\n    const { hierarchical } = (localOptions.layout || {})\n    const corrections = {\n      layout: {\n        hierarchical: {\n          enabled: (\n            hierarchical === undefined || hierarchical === null\n              ? false\n              : typeof hierarchical === 'boolean'\n                ? hierarchical\n                : hierarchical.enabled !== false\n          )\n        }\n      }\n    };\n\n    // we need to first merge local options with corrections to prevent that\n    // global options are overridden by e.g. \"hierarchical\" being a non-object\n    const options = utils.merge({}, globalOptions, utils.merge(localOptions, corrections));\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(\n      new $tw.Tiddler(\n        {\n          title: tRef,\n          type: 'image/png',\n          text: this.getSnapshot(true)\n        },\n        $tw.wiki.getCreationFields(),\n        $tw.wiki.getModificationFields()\n      )\n    );\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    const curTiddler = utils.getTiddler(utils.getText(trigger));\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      if (curTiddler) {\n        this.trace[curTiddler.fields.title] = true;\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we copy the object since we intend to modify it.\n    // NOTE: A deep copy would be needed if a nested property were modified\n    //       In that case, use $tw.utils.deepCopy.\n    const nodeData = { ...this.view.getNodeData(node.id) };\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n    if (properties.nodes.length || properties.edges.length) {\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n        this.handleOpenMapElementEvent(properties);\n      }\n    } else { // = clicked on an empty spot\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n    }\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n      const node = this.graphData.nodesById[nodes[0]];\n      if (this.view.isEnabled('neighbourhood_trace_clicks')) {\n        this.trace[$tm.adapter.getTiddlerById(node.id)] = true;\n        this.isPreventZoomOnNextUpdate = Date.now() + 500;\n        this.rebuildGraph();\n\n        if (this.view.isEnabled('neighbourhood_focus_newly_traced_node')) {\n          setTimeout(() => {\n            this.network.focus(node.id, {\n              scale: 1,\n              animation: true\n            });\n          }, 1500);\n        }\n      }\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    if (!this.isDraggingAllowed(nodes)) {\n      return;\n    }\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  isDraggingAllowed({ nodes }) {\n    return (\n      this.editorMode || this.view.isEnabled('physics_mode')\n    );\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (\n      !nodes.length ||\n      // we do not allow nodes to be dragged if not in editor mode\n      // except cases physics is enabled\n      !this.isDraggingAllowed(nodes)\n    ) {\n      return;\n    }\n\n    this.hidePopups(0, true);\n    this.assignActiveStyle(nodes);\n    this.setNodesMoveable(nodes, true);\n\n    if (nodes.length === 1) {\n      this.draggedNode = nodes[0];\n    }\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // we don't wait til next render-cycle (which would leave tiddlymap in\n    // a rather undefined state) but update immediately.\n    this.update({\n      changedTiddlers: {\n        [viewHolderRef]: true\n      }\n    });\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}