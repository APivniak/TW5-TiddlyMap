{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["Object","defineProperty","exports","value","tiddlymap","tmap","undefined","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_CallbackManager","require","_CallbackManager2","_interopRequireDefault","_ViewAbstraction","_ViewAbstraction2","_EdgeType","_EdgeType2","_Popup","_Popup2","_vis","_vis2","_widget","_utils","_utils2","_SelectionRectangle","_SelectionRectangle2","_environment","env","_interopRequireWildcard","obj","__esModule","newObj","default","_defineProperty","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MapWidget","_Widget","parseTreeNode","options","this","_this","getPrototypeOf","getAttr","getAttribute","isDebug","utils","isTrue","$tm","config","sys","debug","bindTo","callbackManager","CallbackManager","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","handleCreateView","handleRenameView","handleDeleteView","handleDeleteElement","handleEditView","handleGenerateWidget","handleSetCentralTopic","handleSaveCanvas","handleFocusNode","repaintGraph","tmapTmNeighbourhoodResetTrace","initAndRenderGraph","graphDomNode","visListeners","click","handleVisSingleClickEvent","doubleClick","handleVisDoubleClickEvent","stabilized","handleVisStabilizedEvent","selectNode","handleVisSelectNode","deselectNode","handleVisDeselectNode","dragStart","handleVisDragStart","dragEnd","handleVisDragEnd","hoverNode","handleVisHoverElement","hoverEdge","blurNode","handleVisBlurElement","blurEdge","beforeDrawing","handleVisBeforeDrawing","afterDrawing","handleVisAfterDrawing","stabilizationProgress","handleVisLoading","stabilizationIterationsDone","handleVisLoadingDone","windowDomListeners","resize","handleResizeEvent","handleClickEvent","mousemove","handleCanvasMouseMove","canvasDomListeners","keyup","handleCanvasKeyup","keydown","handleCanvasKeydown","mousewheel","handleCanvasScroll","DOMMouseScroll","contextmenu","handleContextMenu","MozMousePixelScroll","handleExtraCanvasScroll","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","to","handleConnectionEvent","edge","callback","_this2","eTyFilter","view","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","getLabel","raw","dialogManager","open","isConfirmed","outTObj","str","getText","type","EdgeType","getInstance","namespace","_EdgeType$getIdParts","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","checkForFreshInstall","getEntry","ref","sysMeta","setEntry","args","dialog","preselects","getPropertiesByPrefix","fields","tiddlerExists","setText","misc","defaultViewLabel","n1","insertNode","x","y","n2","keys","touch","openStandardConfirmDialog","message","logger","slice","unshift","apply","render","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","addClass","appendChild","isPreviewed","renderPreview","renderFullWidget","downloadCanvas","header","body","snapshotTRef","snapshotTObj","getTiddler","innerHTML","className","tree","getTiddlerNode","getRoot","children","push","getTranscludeNode","makeChildWidgets","renderChildren","firstChild","widget","setDomListeners","window","addLoadingBar","tooltip","Popup","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","isTiddlyWikiFakeDom","contains","rebuildEditorBar","reloadRefreshTriggers","registry","mainEditorId","url","query","toggleEnlargedMode","setView","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","viewHolder","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","isShowNeighbourhood","isEnabled","tracingBtnClass","neighScopeBtnClass","rasterMenuBtnClass","setVariable","graphBar","el","getElementNode","focusButton","refresh","changedTiddlers","update","updates","network","isZombieWidget","isViewSwitched","hasChangedAttributes","trace","makeHashMap","reloadBackgroundImage","isViewUpdated","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","hidePopups","isForce","hide","remove","refreshTriggers","parseStringArray","add","handleTriggeredRefresh","_ref","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","preventZoom","Date","now","stabilize","getContainer","_this3","start","params","matches","getMatches","getNodeFilter","originalMatches","clickPathMatches","combinedMatches","filter","tRef","includeNeighboursOf","includes","graph","getGraph","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","ViewAbstraction","maybeMatches","inGraph","isSystemOrDraft","modified","nodeFilter","_this4","_destructVis","getVisOptions","vis","DataSet","setEnabled","enabled","Network","canvas","getElementsByTagName","networkDomNode","tabIndex","event","on","bind","addGraphButtons","fullscreenButton","halfscreenButton","focus","isLiveView","ev","_this5","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","role","ucFirst","openTiddlerWithId","altKey","metaKey","scopeStr","fromCharCode","setConfig","handleRemoveElements","getSelection","paramObject","elements","buttons","selectRect","selectedNodes","redraw","stopPropagation","mouse","DOMtoCanvas","offsetX","offsetY","SelectionRectangle","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","interaction","isVisSettingInSync","zoomView","_this6","nodeId","getNodeAt","show","div","mode","registerTransclude","contextMenuWidget","focusButtonStateTRef","deleteByPrefix","clipBoard","ids","addNode","get","returnType","removeNode","_this7","globalOptions","localOptions","parseJSON","_ref2","layout","hierarchical","corrections","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","addEdge","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","isVisInEditMode","getElementsByClassName","_this8","getField","isClone","newView","isCreate","protoView","_this9","isLocked","references","getOccurrences","count","toString","refFilter","joinAndWrap","rename","_this10","visInherited","JSON","stringify","viewConfig","createdOn","getCreationDate","numberOfNodes","numberOfEdges","extend","prvBg","saveNodePositions","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","_this11","tempImagePath","createAndSaveSnapshot","imageName","snapshot","width","height","action","title","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","addPlaceholder","wiki","deleteTiddler","a","download","href","getCanvasAsBase64","size","MouseEvent","addTiddler","Tiddler","text","withoutPreamble","getCreationFields","getModificationFields","_ref3","oldWidth","style","oldHeight","toDataURL","getWithoutPrefix","_this12","viewname","destroy","msg","trigger","curTiddler","liveTab","fallbackView","_ref4","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","_this13","tiddlers","stringifyList","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","_ref5","setCentralTopic","properties","idsOfNodesWithoutPosition","setNodesMoveable","fitGraph","_ref6","scale","animation","_this14","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","_this15","trim","isMatch","makeNode","tObj","_this16","tracker","getTiddlerById","globalDefaultNodeStyle","localDefaultNodeStyle","nodeStylesByTRef","getInheritedNodeStyles","groupNodeStyles","globalIndividualNodeStyle","color","localIndividualStyle","getNodeData","tiddler","tidColor","tidIcon","field","nodeIcon","tidLabelField","nodeLabel","tidIconField","addToPreselects","scope","store","global","p","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","_ref7","_this17","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","evt","selected","button","_ref8","isDraggingAllowed","_ref9","defaultColor","colorObj","highlight","hover","_ref10","pos","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","fill","constructTooltip","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isShown","populator","_ref11","total","display","setAttribute","_ref12","destruct","_this18","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","noCache","_this19","bgFieldValue","imgTObj","img","Image","onload","urlField","src","makeDataUri","isInFS","hasClass","setGraphButtonEnabled","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","Widget"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["/* @preserve TW-Guard */\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n/* @preserve TW-Guard */\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleExtraCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph,\n      'tmap:tm-neighbourhood-reset-trace': () => { this.initAndRenderGraph(this.graphDomNode); }\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n      // Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n      'MozMousePixelScroll': [ this.handleExtraCanvasScroll, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    const args = {\n      dialog: {\n        preselects: {\n          \"config.storyview\": \"true\",\n          \"config.navigation\": \"true\",\n          \"config.sidebar\": \"true\",\n          \"config.demo\": \"true\",\n        }\n      }\n    };\n\n    $tm.dialogManager.open('welcome', args, (isConfirmed, outTObj) => {\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      if (config['storyview'] && utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n        utils.setText('$:/view', 'top');\n      }\n\n      if (config['navigation']) {\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n      }\n\n      if (config['sidebar']) {\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n      }\n\n      if (config['demo']) {\n        const view = $tm.misc.defaultViewLabel;\n\n        const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n        const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n        $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n      }\n\n      if (Object.keys(config).length) {\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/tiddlymap');\n      }\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this)) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n      const downloadCanvas = this.document.createElement('canvas');\n      $tw.utils.addClass(downloadCanvas, 'tmap-download-canvas');\n\n      this.domNode.appendChild(downloadCanvas);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.snapshotTRef;\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const tree = utils.getTiddlerNode(this.view.getRoot());\n      tree.children.push(utils.getTranscludeNode(snapshotTRef));\n      this.makeChildWidgets([ tree ]);\n      this.renderChildren(body, body.firstChild);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      isShowNeighbourhood: String(view.isEnabled('neighbourhood_scope')),\n      tracingBtnClass: view.isEnabled('neighbourhood_trace_clicks') ? activeUnicodeBtnClass : unicodeBtnClass,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (\n       this.isViewSwitched(changedTiddlers)\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched or config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n\n      this.trace = utils.makeHashMap();\n\n      this.rebuildEditorBar();\n      this.reloadBackgroundImage();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n      const preventZoom = this.isPreventZoomOnNextUpdate == null\n        ? false\n        : typeof this.isPreventZoomOnNextUpdate === 'number'\n          ? this.isPreventZoomOnNextUpdate > Date.now()\n          : this.isPreventZoomOnNextUpdate;\n\n      if (!preventZoom) {\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      if (typeof this.isPreventZoomOnNextUpdate !== 'number') {\n        this.isPreventZoomOnNextUpdate = false;\n      }\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const params = {\n      view: this.view,\n      matches: utils.getMatches(this.view.getNodeFilter('compiled'))\n    };\n\n    if (this.view.isEnabled('neighbourhood_trace_clicks')) {\n      const originalMatches = params.matches;\n      const clickPathMatches = Object.keys(this.trace);\n      const combinedMatches = [\n        ...originalMatches.filter(tRef => !this.trace[tRef]),\n        ...clickPathMatches,\n      ];\n      params.matches = combinedMatches;\n      params.includeNeighboursOf = this.view.isEnabled('neighbourhood_include_traced_node_neighbours')\n        ? tRef => combinedMatches.includes(tRef)\n        : tRef => originalMatches.includes(tRef);\n    }\n\n    const graph = $tm.adapter.getGraph(params);\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   * Also if a view suddenly doesn't exist anymore we consider this\n   * a trigger for a view change.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return (\n      !ViewAbstraction.exists(this.view)\n      || changedTiddlers[this.getViewHolderRef()]\n    );\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n    this.trace = utils.makeHashMap();\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n    if (this.isLiveView() && this.view.isEnabled('neighbourhood_trace_clicks')) {\n      // directly trigger refresh so we add  currently focussed as traced node\n      this.trace[utils.getText(this.refreshTriggers[0])] = true;\n    }\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.altKey || ev.metaKey) {\n      ev.preventDefault();\n\n      if (ev.keyCode >= 48 && ev.keyCode <= 57) { // 0 through 9\n        const scopeStr = String.fromCharCode(ev.keyCode);\n        this.view.setConfig('neighbourhood_scope', scopeStr);\n      }\n    } else {\n      if (ev.keyCode === 46) { // delete\n        ev.preventDefault();\n        this.handleRemoveElements(this.network.getSelection());\n      }\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * This handles the extraneous event fired by Firefox whenever a\n   * DOMMouseScroll event occurs. We just want to swallow it.\n   * Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/306\n   */\n  handleExtraCanvasScroll(ev) {\n\n    // Solves: https://github.com/felixhayashi/TW5-TiddlyMap/issues/409\n    if (this.isInSidebar) {\n      ev.preventDefault();\n    }\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis')) || {};\n\n    const { hierarchical } = (localOptions.layout || {})\n    const corrections = {\n      layout: {\n        hierarchical: {\n          enabled: (\n            hierarchical === undefined || hierarchical === null\n              ? false\n              : typeof hierarchical === 'boolean'\n                ? hierarchical\n                : hierarchical.enabled !== false\n          )\n        }\n      }\n    };\n\n    // we need to first merge local options with corrections to prevent that\n    // global options are overridden by e.g. \"hierarchical\" being a non-object\n    const options = utils.merge({}, globalOptions, utils.merge(localOptions, corrections));\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Whether this view represents the 'live view'\n   *\n   * @return {boolean}\n   */\n  isLiveView() {\n\n    return this.id === 'live_tab';\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'inherited-style': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(100, 100, tempImagePath);\n    let imageName = `${this.view.getLabel()}.png`;\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        view: this.view.getLabel(),\n        preselects: {\n          width: this.canvas.width.toString(),\n          height: this.canvas.height.toString(),\n          name: imageName,\n          action: 'download',\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      const width = outTObj.fields.width || args.dialog.preselects.width;\n      const height = outTObj.fields.height || args.dialog.preselects.height;\n\n      // save the image with the new sizes defined by the user in the dialog\n      this.createAndSaveSnapshot(width, height, tempImagePath);\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      const title = outTObj.fields.name || args.dialog.preselects.imageName;\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(width, height, title);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, title, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: title\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(width, height, title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title;\n    a.href = this.getCanvasAsBase64({ size: { width, height }});\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(width, height, tRef, title) {\n    $tw.wiki.addTiddler(\n      new $tw.Tiddler(\n        {\n          title: title || tRef,\n          type: 'image/png',\n          text: this.getCanvasAsBase64({ size: { width, height }, withoutPreamble: true })\n        },\n        $tw.wiki.getCreationFields(),\n        $tw.wiki.getModificationFields()\n      )\n    );\n\n    return tRef;\n\n  }\n\n  getCanvasAsBase64({ withoutPreamble, size } = {}) {\n\n    const oldWidth = this.graphDomNode.style.width;\n    const oldHeight = this.graphDomNode.style.height;\n    if (size) {\n      this.graphDomNode.style.width = `${size.width}px`;\n      this.graphDomNode.style.height = `${size.height}px`;\n      this.network.redraw();\n    }\n\n    const data = this.canvas.toDataURL('image/png');\n\n    if (size) {\n      this.graphDomNode.style.width = oldWidth;\n      this.graphDomNode.style.height = oldHeight;\n      this.network.redraw();\n    }\n\n    return (withoutPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    const curTiddler = utils.getTiddler(utils.getText(trigger));\n\n    if (this.isLiveView()) {\n      if (curTiddler) {\n        if (this.view.isEnabled('neighbourhood_trace_clicks')) {\n          this.trace[curTiddler.fields.title] = true;\n        }\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title').trim();\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaultNodeStyle = $tm.config.vis.nodes;\n    const localDefaultNodeStyle = utils.parseJSON(this.view.getConfig('vis'), {}).nodes;\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupNodeStyles = nodeStylesByTRef[tRef];\n    const globalIndividualNodeStyle = utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style']));\n\n    const viewLabel = this.view.getLabel();\n\n    // we copy the object since we intend to modify it.\n    // NOTE: A deep copy would be needed if a nested property were modified\n    //       In that case, use $tw.utils.deepCopy.\n    const localIndividualStyle = { ...this.view.getNodeData(node.id) };\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete localIndividualStyle.x;\n    delete localIndividualStyle.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': JSON.stringify(globalDefaultNodeStyle),\n          'inherited-local-default-style': JSON.stringify(localDefaultNodeStyle),\n          'inherited-group-styles': JSON.stringify(groupNodeStyles),\n          // careful: \"global.\" is parsed later so don't change name\n          'global.tmap.style': JSON.stringify(globalIndividualNodeStyle),\n          'local-individual-node-style': JSON.stringify(localIndividualStyle)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', localIndividualStyle, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-individual-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-individual-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n    if (properties.nodes.length || properties.edges.length) {\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n        this.handleOpenMapElementEvent(properties);\n      }\n    } else { // = clicked on an empty spot\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n    }\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n      const node = this.graphData.nodesById[nodes[0]];\n      if (this.view.isEnabled('neighbourhood_trace_clicks')) {\n        this.trace[$tm.adapter.getTiddlerById(node.id)] = true;\n        this.isPreventZoomOnNextUpdate = Date.now() + 500;\n        this.rebuildGraph();\n\n        if (this.view.isEnabled('neighbourhood_focus_newly_traced_node')) {\n          setTimeout(() => {\n            this.network.focus(node.id, {\n              scale: 1,\n              animation: true\n            });\n          }, 1500);\n        }\n      }\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      }\n\n      this.openTiddlerWithId(nodes[0]);\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    if (!this.isDraggingAllowed(nodes)) {\n      return;\n    }\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  isDraggingAllowed({ nodes }) {\n    return (\n      this.editorMode || this.view.isEnabled('physics_mode')\n    );\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (\n      !nodes.length ||\n      // we do not allow nodes to be dragged if not in editor mode\n      // except cases physics is enabled\n      !this.isDraggingAllowed(nodes)\n    ) {\n      return;\n    }\n\n    this.hidePopups(0, true);\n    this.assignActiveStyle(nodes);\n    this.setNodesMoveable(nodes, true);\n\n    if (nodes.length === 1) {\n      this.draggedNode = nodes[0];\n    }\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // we don't wait til next render-cycle (which would leave tiddlymap in\n    // a rather undefined state) but update immediately.\n    this.update({\n      changedTiddlers: {\n        [viewHolderRef]: true\n      }\n    });\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        img.src = urlField;\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n    } else if (bgFieldValue) { // try loading directly from reference\n      img.src = bgFieldValue;\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}