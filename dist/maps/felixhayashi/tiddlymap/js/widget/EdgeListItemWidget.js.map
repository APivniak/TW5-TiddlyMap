{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js"],"names":["EdgeListItemWidget","parseTreeNode","options","arrows","$tm","misc","item","tRef","tracker","getTiddlerById","neighbour","id","edge","utils","flatten","p","setVariable","type","indeces","allETy","indexedAs","to","arrow","biArrow","invertedArrow","bi","in","out","makeChildWidgets","changedTiddlers","refreshChildren","Widget","exports"],"mappings":";;;;AAaA;;AACA;;;;;;;;;;+eAdA;AACA;;;;;;;;;;AAUA;;AAKA;;IAEMA,kB;;;AAEJ,8BAAYC,aAAZ,EAA2BC,OAA3B,EAAoC;AAAA;;AAAA,wIAE5BD,aAF4B,EAEbC,OAFa;;AAGlC,UAAKC,MAAL,GAAcC,IAAIC,IAAJ,CAASF,MAAvB;;AAHkC;AAKnC;;;;8BAES;;AAER,UAAMG,OAAO,KAAKL,aAAlB;AACA,UAAMM,OAAOH,IAAII,OAAJ,CAAYC,cAAZ,CAA2BH,KAAKI,SAAL,CAAeC,EAA1C,CAAb;;AAEA;AACA,UAAMC,OAAOC,gBAAMC,OAAN,CAAcR,KAAKM,IAAnB,CAAb;;AAEA,WAAK,IAAIG,CAAT,IAAcH,IAAd,EAAoB;AAClB,YAAI,OAAOA,KAAKG,CAAL,CAAP,KAAmB,QAAvB,EAAiC;AAC/B,eAAKC,WAAL,WAAyBD,CAAzB,EAA8BH,KAAKG,CAAL,CAA9B;AACD;AACF;;AAED;AACA,WAAKC,WAAL,CAAiB,gBAAjB,EAAmCT,IAAnC;AACA,WAAKS,WAAL,CAAiB,WAAjB,EAA8BT,IAA9B;;AAEA,UAAMU,OAAOb,IAAIc,OAAJ,CAAYC,MAAZ,CAAmBP,KAAKK,IAAxB,CAAb;AACA,UAAMG,YAAaR,KAAKS,EAAL,KAAYf,KAAKI,SAAL,CAAeC,EAA3B,GAAgC,IAAhC,GAAuC,MAA1D;AACA,UAAIW,QAAQF,SAAZ;;AAEA,UAAIH,KAAKM,OAAT,EAAkB;AAChBD,gBAAQ,IAAR;AACD,OAFD,MAEO;AACL,YAAIF,cAAc,IAAd,IAAsBH,KAAKO,aAA/B,EAA8C;AAC5CF,kBAAQ,MAAR;AACD,SAFD,MAEO,IAAIF,cAAc,MAAd,IAAwBH,KAAKO,aAAjC,EAAgD;AACrDF,kBAAQ,IAAR;AACD;AACF;;AAED,WAAKN,WAAL,CAAiB,WAAjB,EAA8BM,KAA9B;AACA,WAAKN,WAAL,CAAiB,iBAAjB,EAAoCM,UAAU,IAAV,GAChC,KAAKnB,MAAL,CAAYsB,EADoB,GAEhCH,UAAU,MAAV,GACE,KAAKnB,MAAL,CAAYuB,EADd,GAEE,KAAKvB,MAAL,CAAYwB,GAJlB;;AAMA;AACA,WAAKC,gBAAL;AAED;;;4BAEOC,e,EAAiB;;AAEvB,aAAO,KAAKC,eAAL,CAAqBD,eAArB,CAAP;AAED;;;;EAzD8BE,c;;AA4DjC;;AAEAC,QAAQ,mBAAR,IAA+BhC,kBAA/B","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListItemWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidgetItem\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListItemWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n    this.arrows = $tm.misc.arrows;\n\n  }\n\n  execute() {\n\n    const item = this.parseTreeNode;\n    const tRef = $tm.tracker.getTiddlerById(item.neighbour.id);\n\n    // make edge properties available as variables\n    const edge = utils.flatten(item.edge);\n\n    for (let p in edge) {\n      if (typeof edge[p] === 'string') {\n        this.setVariable(`edge.${p}`, edge[p]);\n      }\n    }\n\n    // Perspective: Neighbour\n    this.setVariable('currentTiddler', tRef);\n    this.setVariable('neighbour', tRef);\n\n    const type = $tm.indeces.allETy[edge.type];\n    const indexedAs = (edge.to === item.neighbour.id ? 'to' : 'from');\n    let arrow = indexedAs;\n\n    if (type.biArrow) {\n      arrow = 'bi';\n    } else {\n      if (indexedAs === 'to' && type.invertedArrow) {\n        arrow = 'from';\n      } else if (indexedAs === 'from' && type.invertedArrow) {\n        arrow = 'to';\n      }\n    }\n\n    this.setVariable('direction', arrow);\n    this.setVariable('directionSymbol', arrow === 'bi'\n      ? this.arrows.bi\n      : arrow === 'from'\n        ? this.arrows.in\n        : this.arrows.out);\n\n    // Construct the child widgets\n    this.makeChildWidgets();\n\n  }\n\n  refresh(changedTiddlers) {\n\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-edgelistitem'] = EdgeListItemWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}