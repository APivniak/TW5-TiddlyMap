{"version":3,"sources":["felixhayashi/tiddlymap/js/lib/utils/wiki.js"],"names":["basicUtils","getTiddlerRef","tiddler","$tw","Tiddler","fields","title","InvalidArgumentException","getTiddler","wiki","getField","field","defValue","tObj","tiddlerExists","tRef","Boolean","isShadowTiddler","setSidebarTab","setText","getTiddlersByPrefix","setField","value","text","addTiddler","deleteTiddlers","keys","Object","tiddlers","storyList","getTiddlerList","i","length","index","indexOf","splice","deleteTiddler","moveFieldValues","oldName","newName","isRemoveOldField","isIncludeSystemTiddlers","allTiddlers","allTitles","isDraft","isSystemTiddler","undefined","getMatches","filter","widget","source","compileFilter","Array","isArray","callback","call","isMatch","getTranscludeNode","isBlock","type","attributes","children","getTiddlerNode","getElementNode","className","tag","class","registerTransclude","name","removeArrayElement","makeChildWidget","push","notify","notifyTiddlerRef","message","notifier","display","isPreviewed","domNode","isTiddlyWikiFakeDom","getVariable","cls","getAncestorWithClass","parentDomNode","parseFieldData","data","parseJSON","writeFieldData","indent","parseInt","JSON","stringify","clone","src","dest","setEntry","prop","getEntry","getTiddlerData","isLeftVersionGreater","v1","v2","utils","checkVersions","getText","isSystemOrDraft","getMergedTiddlers","getModificationFields","getCreationFields","unshift","Function","prototype","bind","apply","getChildWidgetByProperty","val","child","addTWlisteners","listeners","context","id","addEventListener","mv","oldPrefix","newPrefix","isForce","isDelete","targets","fromToMapper","makeHashMap","oldTRef","newTRef","replace","cp","deleteByPrefix","prefix","deletedTiddlers","startsWith","getTiddlersWithField","fieldName","options","isIncludeDrafts","result","hasOwnProp","hop","limit","getTiddlerWithField","removePrefix","iterator","getWithoutPrefix","touch"],"mappings":"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","file":"../../../../../../felixhayashi/tiddlymap/js/lib/utils/wiki.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/lib/utils/wiki\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport {\n  EnvironmentError,\n  InvalidArgumentException,\n}                           from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport * as basicUtils      from '$:/plugins/felixhayashi/tiddlymap/js/lib/utils/basic';\n\n/**\n * Gets a tiddler reference from a tRef or tObj\n *\n * @param {Tiddler|string} tiddler - A tiddler reference or object.\n * @return {TiddlerReference|null} A tiddler reference (title)\n */\nexport const getTiddlerRef = tiddler => {\n\n  if (tiddler instanceof $tw.Tiddler) {\n\n    return tiddler.fields.title;\n\n  } else if (typeof tiddler === 'string') {\n\n    return tiddler;\n\n  } else {\n\n    throw new InvalidArgumentException(tiddler);\n\n  }\n\n};\n\n/**\n * Similar to {@code wiki.getTiddler()} but also accepts a tObj as\n * argument, thus, making it unnecessary to always differentiate or remember\n * if we are dealing with an object or a reference.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/boot/boot.js#L866\n * @param {Tiddler} tiddler - A tiddler reference or object.\n * @return {Tiddler} A tiddler object.\n */\nexport const getTiddler = tiddler =>\n  $tw.wiki.getTiddler(tiddler instanceof $tw.Tiddler ? tiddler.fields.title : tiddler);\n\n/**\n * Get a tiddler's field value. If the field does not exist or\n * its value is an empty string, return the default or an empty\n * string.\n */\nexport const getField = (tiddler, field, defValue = '') => {\n\n  const tObj = getTiddler(tiddler);\n  return (!tObj ? defValue : tObj.fields[field] || defValue);\n\n};\n\n/**\n * Checks if tiddlers (including shadow tiddlers) exist.\n *\n * @param {Tiddler} tiddler\n * @return {boolean} True if the tiddler exists, false otherwise\n */\nexport const tiddlerExists = tiddler => {\n\n  if (!tiddler) {\n    return false;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n\n  return Boolean(tRef && ($tw.wiki.tiddlerExists(tRef) || $tw.wiki.isShadowTiddler(tRef)));\n\n};\n\nexport const setSidebarTab = tRef => {\n\n  setText(getTiddlersByPrefix('$:/state/tab/sidebar-')[0], tRef);\n\n};\n\n/**\n * Set a tiddler field to a given value.\n *\n * Setting the title field to another value will clone the tiddler.\n * In this case, better use @link{clone} as this is\n * semantically stronger.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n *\n * @return {$tw.Tiddler|undefined} The tiddler object containing\n *     the field with the assigned value.\n */\nexport const setField = (tiddler, field, value) => {\n\n  if (!tiddler || !field) {\n    return;\n  }\n\n  const tRef = getTiddlerRef(tiddler);\n  const fields = {\n    title: tRef,\n    [field]: value\n  };\n\n  // do not use any tObj provided, it may result in a lost update!\n  let tObj = $tw.wiki.getTiddler(tRef, true);\n\n  if (field !== 'text' && tObj && !tObj.fields.text) {\n    fields.text = '';\n  }\n\n  tObj = new $tw.Tiddler(tObj, fields);\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\n/**\n * Pendant to tw native {@code addTiddlers()}.\n *\n * Also removes tiddlers from the river.\n *\n * @param {TiddlerCollection} tiddlers - A collection of tiddlers\n * to be removed.\n */\nexport const deleteTiddlers = tiddlers => {\n\n  const keys = Object.keys(tiddlers);\n  const storyList = $tw.wiki.getTiddlerList('$:/StoryList');\n\n  for (let i = keys.length; i--;) {\n    let tRef = getTiddlerRef(tiddlers[keys[i]]);\n    if (!$tw.wiki.tiddlerExists(tiddlers[keys[i]])) {\n      // this check is important!\n      // see https://github.com/Jermolene/TiddlyWiki5/issues/1919\n      continue;\n    }\n\n    const index = storyList.indexOf(tRef);\n    if (index !== -1) { // tiddler is displayed in river\n      storyList.splice(index, 1);\n      setField('$:/StoryList', 'list', storyList);\n    }\n\n    // finally delete the tiddler;\n\n\n    $tw.wiki.deleteTiddler(tRef);\n\n  }\n\n};\n\nexport const moveFieldValues = (oldName, newName, isRemoveOldField, isIncludeSystemTiddlers, tiddlers) => {\n\n  if (oldName === newName) return;\n\n  const allTiddlers = tiddlers || $tw.wiki.allTitles();\n\n  for (let i = allTiddlers.length; i--;) {\n\n    const tObj = getTiddler(allTiddlers[i]);\n\n    if (tObj.isDraft() || !tObj.fields[oldName]) {\n      continue;\n    }\n\n    if (!isIncludeSystemTiddlers && $tw.wiki.isSystemTiddler(allTiddlers[i])) {\n      continue;\n    }\n\n    const fields = {\n      [newName]: tObj.fields[oldName]\n    };\n\n    if (isRemoveOldField) {\n      fields[oldName] = undefined;\n    }\n    $tw.wiki.addTiddler(new $tw.Tiddler(tObj, fields));\n\n  }\n\n};\n\n/**\n * This function returns all tiddlers that match the filter.\n *\n * @Todo: skip drafts! Or not?\n *\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @param {TiddlerCollection} [tiddlers] - A set of tiddlers used as\n *     source. If not defined, all tiddlers and system tiddlers are\n *     selected. Shadows are *not* included.\n * @return {Array.<TiddlerReference>}\n */\nexport const getMatches = (filter, tiddlers, widget) => {\n\n  // use wiki as default source\n  let source = undefined;\n\n  // shortcuts for performance\n  const wiki = $tw.wiki;\n\n  if (typeof filter === 'string') {\n    filter = wiki.compileFilter(filter);\n  }\n\n  // if a source is provided, create an iterator callback\n  if (tiddlers != null && typeof tiddlers === 'object') {\n\n    if (!Array.isArray(tiddlers)) {\n      tiddlers = Object.keys(tiddlers);\n    }\n\n    source = callback => {\n      for (let i = tiddlers.length; i--;) {\n        const tObj = wiki.getTiddler(tiddlers[i]);\n        callback(tObj, tiddlers[i]);\n      }\n    };\n\n  }\n\n  return filter.call(wiki, source, widget);\n\n};\n\n/**\n * Tries to match a single tiddler object against a filter.\n * Returns a boolean value.\n *\n * @param {Tiddler} tiddler - The object to apply the filter to.\n * @param {TiddlyWikiFilter} filter - The filter to use.\n * @return {boolean} True if the tiddler matches the filter, false otherwise.\n */\nexport const isMatch = (tiddler, filter) =>\n  getTiddlerRef(tiddler) === getMatches(filter, [ getTiddlerRef(tiddler) ])[0];\n\n\n/**\n *\n * @param {Tiddler} tiddler\n * @param {boolean} isBlock\n */\nexport const getTranscludeNode = (tiddler, isBlock) =>\n  ({\n    type: 'transclude',\n    attributes: {\n      tiddler: {\n        type: 'string',\n        value: getTiddlerRef(tiddler) }},\n    children: [],\n    isBlock: !!isBlock\n  });\n\n/**\n *\n * @param {Tiddler} tiddler\n */\nexport const getTiddlerNode = tiddler =>\n  ({\n    type: 'tiddler',\n    attributes: {\n      tiddler: {\n        type: 'string', value: getTiddlerRef(tiddler) }},\n    children: []\n  });\n\n/**\n *\n * @param type\n * @param className\n * @param text\n */\nexport const getElementNode = (type, className, text) =>\n  ({\n    type: 'element',\n    tag: type,\n    attributes: {\n      class: {\n        type: 'string',\n        value: className }},\n    children: text ? [ {type: 'text', text: text } ] : []\n  });\n\n/**\n *\n * @param {Widget} widget\n * @param {string} name\n * @param {Tiddler} tiddler\n * @return {*}\n */\nexport const registerTransclude = (widget, name, tiddler) => {\n\n  // if an instance exists, remove it\n  basicUtils.removeArrayElement(widget.children, widget[name]);\n\n  widget[name] = widget.makeChildWidget(getTranscludeNode(tiddler, true));\n  widget.children.push(widget[name]);\n\n  return widget[name];\n\n};\n\n/**\n * This function uses the tw-notification mechanism to display a\n * temporary message.\n *\n * @see https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/utils/dom/notifier.js\n * @param {string} message - A short message to display.\n */\nexport const notify = message => {\n\n  // @todo add to environment\n  const notifyTiddlerRef = '$:/temp/tiddlymap/notify';\n\n  $tw.wiki.addTiddler(new $tw.Tiddler({\n    title : notifyTiddlerRef,\n    text : message\n  }));\n\n  $tw.notifier.display(notifyTiddlerRef);\n\n};\n\n/**\n * The function allows to detect whether a widget is displayed\n * in preview or not.\n */\nexport const isPreviewed = widget => {\n  if (!widget) {\n    return false;\n  }\n\n  // TODO: in the wiki utils we should not know about TiddlyMap domNode property!\n  if (widget.domNode.isTiddlyWikiFakeDom) {\n    return true;\n  }\n\n  if (widget.getVariable('tv-tiddler-preview')) {\n    return true;\n  } else { // fallback for < v5.1.9\n    const cls = 'tc-tiddler-preview-preview';\n    // TODO: in the wiki utils we should not know about TiddlyMap domNode property!\n    return !!basicUtils.getAncestorWithClass(widget.parentDomNode, cls);\n  }\n\n};\n\n/**\n * Parse json from field or return default value on error.\n *\n * @param {Tiddler} tiddler - The tiddler containing the json.\n * @param {string} field - The field with the json data.\n * @param {Object} [data] - An optional default value.\n * @return {*} Either the parsed data or the default data.\n */\nexport const parseFieldData = (tiddler, field = 'text', data) => {\n\n  const tObj = getTiddler(tiddler);\n\n  if (!tObj) {\n    return data;\n  }\n\n  return basicUtils.parseJSON(tObj.fields[field], data);\n\n};\n\n/**\n * Serialize json data and store it in a tiddler's field.\n *\n * @param {Tiddler} tiddler - The tiddler to store the json in.\n * @param {string} field - The field that will store the json.\n * @param {Object} data - The json data.\n * @param {int} [indent = 0] - the indentation\n */\nexport const writeFieldData = (tiddler, field, data, indent) => {\n\n  if (typeof data !== 'object') {\n    return;\n  }\n\n  indent = parseInt(indent);\n  indent = (indent > 0 && field === 'text' ? indent : 0);\n\n  setField(tiddler, field, JSON.stringify(data, null, indent));\n\n};\n\n/**\n * Clone a tiddler and give it another title.\n * This means the tiddlers are equal except from their titles.\n */\nexport const clone = (src, dest) => {\n\n  setField(src, 'title', dest);\n\n};\n\n/**\n * Set the value of a data tiddler entry (index) to a given value\n */\nexport const setEntry = (tiddler, prop, value) => {\n\n  $tw.wiki.setText(getTiddlerRef(tiddler), null, prop, value);\n\n};\n\n/**\n * Get the value of a data tiddler entry (index)\n */\nexport const getEntry = (tiddler, prop, defValue) => {\n\n  const data = $tw.wiki.getTiddlerData(getTiddlerRef(tiddler), {});\n  return (data[prop] == null ? defValue : data[prop]);\n\n};\n\n//~ utils.getNestedProperty = function(obj, propPath) {\n//~\n  //~ propPath = propPath.split(\".\");\n  //~ for (var i = propPath.length; i--;) {\n    //~ if (obj !== null && typeof obj === \"object\") {\n      //~ obj = obj[propPath[i]];\n  //~ }\n  //~\n//~ };\n\n/**\n * Compare versions.\n * @return {boolean} Unlike `$tw.utils.checkVersions`, this function\n * only returns true if the left argument is greater than the right\n * argument.\n */\nexport const isLeftVersionGreater = (v1, v2) => v1 !== v2 && $tw.utils.checkVersions(v1, v2);\n\n/**\n *\n * @param tiddler\n * @param defValue\n */\nexport const getText = (tiddler, defValue) => getField(tiddler, 'text', defValue);\n\n/**\n *\n * @param tiddler\n * @param value\n */\nexport const setText = (tiddler, value) => {\n\n  setField(tiddler, 'text', value);\n\n};\n\n/**\n * Checks whether a tiddler is a draft or not.\n *\n * @param {Tiddler} tiddler - The tiddler to check on.\n */\nexport const isDraft = tiddler => {\n\n  const tObj = getTiddler(tiddler);\n  return (tObj && tObj.isDraft());\n\n};\n\n\n/**\n * Get a tiddler's text or otherwise return a default text.\n */\nexport const isSystemOrDraft = tiddler =>\n  $tw.wiki.isSystemTiddler(getTiddlerRef(tiddler)) || isDraft(tiddler);\n\n/**\n * Function to merge an array of tiddlers into a single tiddler.\n *\n * @param {Array<TiddlerReference|Tiddler>} tiddlers - The\n *     tiddlers to merge.\n * @param {string} [title=null] - The title where the result is\n *     written to. If not specified, the first array item is used\n *     as output title.\n */\nexport const getMergedTiddlers = (tiddlers, title) => {\n\n  if (!Array.isArray(tiddlers)) {\n    return;\n  }\n\n  // turn all array elements into tiddler objects\n  for (let i = tiddlers.length; i--;) {\n    tiddlers[i] = getTiddler(tiddlers[i]);\n  }\n\n  if (!tiddlers.length) {\n    return;\n  }\n\n  tiddlers.push(\n    { title: (title || tiddlers[0].fields.title) },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  // add context for `apply()` function\n  tiddlers.unshift(null);\n\n  return new (Function.prototype.bind.apply($tw.Tiddler, tiddlers));\n\n};\n\n/**\n * Depth first search\n */\nexport const getChildWidgetByProperty = (widget, prop, val) => {\n\n  const children = widget.children;\n  for (let i = children.length; i--;) {\n    let child = children[i];\n    if (child[prop] === val) {\n      return child;\n    } else {\n      child = getChildWidgetByProperty(child, prop, val);\n      if (child) {\n        return child;\n      }\n    }\n  }\n\n};\n\n/**\n * Register listeners to widget using a hashmap.\n *\n * @param {Hashmap<Key, Function>} listeners - The listeners to attach.\n * @param {Widget} widget - the widget to attach the listeners to.\n * @param {Object} context - The context to bind the listeners to.\n */\nexport const addTWlisteners = (listeners, widget, context) => {\n\n  for (let id in listeners) {\n    widget.addEventListener(id, listeners[id].bind(context));\n  }\n\n};\n\n/**\n * Renames all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are prefixed with `newPrefix` by replacing\n * `oldPrefix` with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @param {boolean} [isDelete=true] - True, if the tiddlers with the\n *     old prefix should be deleted or false, if they should be kept.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const mv = (oldPrefix, newPrefix, isForce, isDelete) => {\n\n  if (oldPrefix === newPrefix || !oldPrefix || !newPrefix) {\n    return;\n  }\n\n  isForce = (typeof isForce === 'boolean' ? isForce : false);\n  isDelete = (typeof isDelete === 'boolean' ? isDelete : true);\n\n  // prepare\n  const targets = getTiddlersByPrefix(oldPrefix);\n  const fromToMapper = basicUtils.makeHashMap();\n\n  for (let i = targets.length; i--;) {\n\n    const oldTRef = targets[i];\n    const newTRef = oldTRef.replace(oldPrefix, newPrefix);\n    if ($tw.wiki.tiddlerExists(newTRef) && !isForce) {\n      return; // undefined\n    }\n    fromToMapper[oldTRef] = newTRef;\n\n  }\n\n  for (let oldTRef in fromToMapper) {\n\n    setField(oldTRef, 'title', fromToMapper[oldTRef]);\n    if (isDelete) {\n      $tw.wiki.deleteTiddler(oldTRef);\n    }\n  }\n\n  return fromToMapper;\n\n};\n\n/**\n * Clones all tiddler titles that are prefixed with `oldPrefix`\n * into titles that are instead prefixed with `newPrefix`.\n *\n * The force option somewhat ensures atomicity.\n *\n * @param {string} oldPrefix - Moves all tiddlers with this prefix.\n * @param {string} newPrefix - All tiddlers moved tiddlers will\n *     receive this new prefix.\n * @param {boolean} [isForce=false] - If a new title would override\n *     an existing title, and `force` is not set, then nothing will\n *     happen and undefined is returned by the function.\n * @returns {Object<string, string>} - A hashmap that maps the old\n *     and the new path.\n */\nexport const cp = (oldPrefix, newPrefix, isForce) =>\n  mv(oldPrefix, newPrefix, isForce, false);\n\n/**\n * Delete all tiddlers with a given prefix.\n *\n * @param {string} prefix - The prefix\n */\nexport const deleteByPrefix = (prefix, tiddlers) => {\n\n  if (!prefix) {\n    return;\n  }\n\n  tiddlers = tiddlers || $tw.wiki.allTitles();\n\n  const deletedTiddlers = [];\n  for (let i = tiddlers.length; i--;) {\n    if (basicUtils.startsWith(tiddlers[i], prefix)) {\n      $tw.wiki.deleteTiddler(tiddlers[i]);\n      deletedTiddlers.push(deletedTiddlers[i]);\n    }\n  }\n\n  return deletedTiddlers;\n\n};\n\n\n/**\n * Returns all tiddlers that possess a property with a certain value.\n *\n * @param {string} fieldName - The property name to look for.\n * @param {string} [value] - If provided, the field's value must\n *     equal this value in order to match.\n * @param {Hashmap} [options] - Further options.\n * @param {TiddlerCollection} [options.tiddlers=$tw.wiki.allTitles()] - A collection\n *     of tiddlers to perform the search on.\n * @param {boolean} [options.isIncludeDrafts=false] - True if drafts of the found\n *     tiddlers are also included in the result set.\n * @param {number} [options.limit] - A positive number delimiting the maximum\n *     number of results.\n *     tiddlers are also included in the result set.\n * @return {Hashmap.<TiddlerReference, Tiddler>} Result\n */\nexport const getTiddlersWithField = (fieldName, value, options = {}) => {\n\n  const tiddlers = options.tiddlers || $tw.wiki.allTitles();\n  const isIncludeDrafts = (options.isIncludeDrafts === true);\n  const result = basicUtils.makeHashMap();\n  const keys = Object.keys(tiddlers);\n  const hasOwnProp = $tw.utils.hop;\n  let limit = options.limit || 0;\n\n  for (let i = keys.length; i--;) {\n\n    const tObj = getTiddler(tiddlers[keys[i]]);\n    const fields = tObj.fields;\n    if (hasOwnProp(fields, fieldName) && (!hasOwnProp(fields, 'draft.of') || isIncludeDrafts)) {\n      if (!value || fields[fieldName] === value ) {\n        result[fields.title] = tObj;\n        if (--limit === 0) {\n          break;\n        }\n      }\n    }\n\n  }\n\n  return result;\n\n};\n\n/**\n *\n * @param name\n * @param value\n */\nexport const getTiddlerWithField = (name, value) =>\n  Object.keys(getTiddlersWithField(name, value, { limit: 1 }))[0];\n\n/**\n * Iterates over all tiddlers in a given way and returns tiddlers\n * whose title matches the prefix string.\n *\n * @param {string} prefix - The prefix to match\n * @param {Hashmap} [options] - An options object.\n * @param {string} [options.iterator=\"each\"] - A tw store iterator\n *    function, e.g. \"eachShadow\" or \"ShadowPlusTiddlers\".\n * @param {boolean} [options.removePrefix= false] - Whether to remove\n *     the prefix or to leave it.\n * @return {Array<string>} The matches with or without the prefix.\n */\nexport const getTiddlersByPrefix = (prefix, options = {}) => {\n\n  const removePrefix = (options.removePrefix === true);\n  const result = [];\n  const iterator = $tw.wiki[options.iterator || 'each'];\n\n  iterator((tObj, tRef) => {\n    if (basicUtils.startsWith(tRef, prefix)) {\n      result.push(removePrefix ? basicUtils.getWithoutPrefix(tRef, prefix) : tRef);\n    }\n  });\n\n  return result;\n\n};\n\n/**\n * Advanced addTiddler method.\n *\n * It adds timestamps and only adds the tiddler if it doesn't exist\n * yet or the force option is used.\n *\n * This method is guarded against\n * https://github.com/Jermolene/TiddlyWiki5/issues/2025\n */\nexport const addTiddler = (tiddler, isForce) => {\n\n  let tObj = getTiddler(tiddler);\n\n  if (!isForce && tObj) {\n    return tObj;\n  }\n\n  tObj = new $tw.Tiddler(\n    {\n      title: tiddler,\n      text: ''\n    },\n    $tw.wiki.getModificationFields(),\n    $tw.wiki.getCreationFields()\n  );\n\n  $tw.wiki.addTiddler(tObj);\n\n  return tObj;\n\n};\n\nexport const touch = tiddler => {\n  if (!tiddler) {\n    return;\n  }\n\n  const tObj = new $tw.Tiddler(\n    getTiddler(tiddler),\n    $tw.wiki.getModificationFields()\n  );\n\n  $tw.wiki.addTiddler(tObj);\n};\n"],"sourceRoot":"../../../../../../../src/plugins"}